#ifndef __STD_STDEXCEPT
#	define __STD_STDEXCEPT 1

/***************************************************************************
 *
 * stdexcept - declarations for the Standard Library standard exception class
 *
 * $Id: stdexcept,v 1.2 1998/03/12 16:18:36 tanveerg Exp $
 *
 ***************************************************************************
 *
 * (c) Copyright 1994-1996 Rogue Wave Software, Inc.
 * ALL RIGHTS RESERVED
 *
 * The software and information contained herein are proprietary to, and
 * comprise valuable trade secrets of, Rogue Wave Software, Inc., which
 * intends to preserve as trade secrets such software and information.
 * This software is furnished pursuant to a written license agreement and
 * may be used, copied, transmitted, and stored only in accordance with
 * the terms of such license and with the inclusion of the above copyright
 * notice.  This software and information or any other copies thereof may
 * not be provided or otherwise made available to any other person.
 *
 * Notwithstanding any other lease or license that may pertain to, or
 * accompany the delivery of, this computer software and information, the
 * rights of the Government regarding its use, reproduction and disclosure
 * are as set forth in Section 52.227-19 of the FARS Computer
 * Software-Restricted Rights clause.
 * 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
 * Technical Data and Computer Software clause at DFARS 252.227-7013.
 * Contractor/Manufacturer is Rogue Wave Software, Inc.,
 * P.O. Box 2328, Corvallis, Oregon 97339.
 *
 * This computer software and information is distributed with "restricted
 * rights."  Use, duplication or disclosure is subject to restrictions as
 * set forth in NASA FAR SUP 18-52.227-79 (April 1985) "Commercial
 * Computer Software-Restricted Rights (April 1985)."  If the Clause at
 * 18-52.227-74 "Rights in Data General" is specified in the contract,
 * then the "Alternate III" clause applies.
 *
 **************************************************************************/

#include <stdcomp.h>

#ifndef __RWSTD_EXCEPT_SEEN
#ifndef _RWSTD_HEADER_REQUIRES_HPP
#include <exception>
#include <new>
#else
#include <exception.hpp>
#endif

#ifndef __NO_STRING_CTOR
#	ifndef _RWSTD_HEADER_REQUIRES_HPP
#		include <string>
#	else
#		include <string.hpp>
#	endif
#else
#	include <cstring>
#endif /* __NO_STRING_CTOR */

#ifndef _RWSTD_NO_NAMESPACE 
namespace std {
#endif

#ifndef _RWSTDExport
#define _RWSTDExport
#endif

// MSVC provides its own exception class and logic_error class.  
// In order to allow the use of MSVC classes derived from these
// We have to use them to, instead of our own.  The drawback is 
// that we don't have a logic_error(const string&) constructor any
// more.  Now we have a logic_error(const char *) constructor.
#ifndef _RWSTD_LOGIC_ERROR_DEFINED

class _RWSTDExport logic_error : public exception
{
  public:

#ifndef __NO_STRING_CTOR

    logic_error (const string& what_arg)  _RWSTD_THROW_SPEC_NULL       
      : str_(what_arg)

	{ ; }

#else // for OS9 (tag)

	logic_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
	{
		if ((str_ = new (nothrow) char[strlen(what_arg) + 1]) == 0)
			str_ = ""; // just set to empty string
		else
			strcpy(str_, what_arg);
	}
	// not in ANSI C++ WP but necessary when not using <string>
	logic_error(const logic_error& lerr) _RWSTD_THROW_SPEC_NULL
	{
		if ((str_ = new (nothrow) char[strlen(lerr.str_) + 1]) == 0)
			str_ = "";
		else
			strcpy(str_, lerr.str_);
	}
	// not in ANSI C++ WP but necessary when not using <string>
	logic_error& operator= (const logic_error& lerr) _RWSTD_THROW_SPEC_NULL
	{
        if ((str_ = new (nothrow) char[strlen(lerr.str_) + 1]) == 0)
            str_ = "";
        else
            strcpy(str_, lerr.str_);
		return *this;
	}		

#endif /* __NO_STRING_CTOR */

    virtual ~logic_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
#	ifndef __NO_STRING_CTOR
    { ; }
#	else
	{
		delete[] str_;
	}
#	endif
#else
    ;
#endif 

    virtual const char * what () const  _RWSTD_THROW_SPEC_NULL
    {
#ifndef __NO_STRING_CTOR
        return str_.data();
#else
		return str_;
#endif
    }

#ifdef __NO_STRING_CTOR
  protected:
	char* str_;
#else
  private:
    string str_;
#endif
};
#endif

class _RWSTDExport domain_error : public logic_error
{
  public:
#ifndef __NO_STRING_CTOR
    domain_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
#ifndef _RWSTD_LOGIC_ERROR_DEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif
#else
	domain_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: logic_error(what_arg)
	{ ; }

	// Not defined in ANSI C++ WP but needed here
	domain_error(const domain_error& derr) _RWSTD_THROW_SPEC_NULL
		: logic_error(derr.str_)
	{ ; }

	// Not defined in ANSI C++ WP but needed here
	domain_error& operator=(const domain_error& derr) _RWSTD_THROW_SPEC_NULL
	{
		logic_error::operator=(derr);	
		return *this;
	}
#endif /* __NO_STRING_CTOR */

    virtual ~domain_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif 
};

class _RWSTDExport invalid_argument : public logic_error
{
  public:

#ifndef __NO_STRING_CTOR
    invalid_argument (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
#ifndef _RWSTD_LOGIC_ERROR_DEFINED
      : logic_error(what_arg) {;}
#else
	  : logic_error(what_arg.c_str()) {;}
#endif

#else // for OS9 (tag)
	invalid_argument(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: logic_error(what_arg)
	{ ; }

	// Not defined in ANSI C++ WP but needed here
	invalid_argument(const invalid_argument& argerr) _RWSTD_THROW_SPEC_NULL
		: logic_error(argerr.str_)
	{ ; }
	//  Not defined in ANSI C++ WP but needed here
	invalid_argument& operator=(const invalid_argument& argerr) _RWSTD_THROW_SPEC_NULL
	{
		logic_error::operator=(argerr);
		return *this;
	}

#endif /* __NO_STRING_CTOR */

    virtual ~invalid_argument ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

class _RWSTDExport length_error : public logic_error
{
  public:

#ifndef __NO_STRING_CTOR
    length_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
#ifndef  _RWSTD_LOGIC_ERROR_DEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif
#else // for OS9 (tag)
	length_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: logic_error(what_arg)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	length_error(const length_error& lerr) _RWSTD_THROW_SPEC_NULL
		: logic_error(lerr.str_)
	{ ; }
	//  Not defined in ANSI C++ WP but needed here
	length_error& operator=(const length_error& lerr) _RWSTD_THROW_SPEC_NULL
	{
		logic_error::operator=(lerr);
		return *this;
	}
#endif /* __NO_STRING_CTOR */

    virtual ~length_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

class _RWSTDExport out_of_range : public logic_error
{
  public:

#ifndef __NO_STRING_CTOR
    out_of_range (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
#ifndef  _RWSTD_LOGIC_ERROR_DEFINED
      : logic_error(what_arg) {;}
#else
      : logic_error(what_arg.c_str()) {;}
#endif
#else // for OS9 (tag)
	out_of_range(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: logic_error(what_arg)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	out_of_range(const out_of_range& orerr) _RWSTD_THROW_SPEC_NULL
		: logic_error(orerr.str_)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	out_of_range& operator= (const out_of_range& orerr) _RWSTD_THROW_SPEC_NULL
	{
		logic_error::operator=(orerr);
		return *this;
	}
#endif /* __NO_STRING_CTOR */

    virtual ~out_of_range ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

class _RWSTDExport runtime_error : public exception
{
  public:
#ifndef __NO_STRING_CTOR
    runtime_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL  
      : str_(what_arg)
    { ; }

#else // for OS9 (tag)
	runtime_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
	{
		if ((str_ = new (nothrow) char[strlen(what_arg)+1]) == 0)
			str_ = "";
		else
			strcpy(str_, what_arg);
	}
	// Not defined in ANSI C++ WP but needed here
	runtime_error(const runtime_error& rterr) _RWSTD_THROW_SPEC_NULL
	{
		if ((str_ = new (nothrow) char[strlen(rterr.str_)+1]) == 0)
			str_ = "";
		else	
			strcpy(str_, rterr.str_);
	}
	// Not defined in ANSI C++ WP but needed here
	runtime_error& operator= (const runtime_error& rterr) _RWSTD_THROW_SPEC_NULL
	{
		if ((str_ = new (nothrow) char[strlen(rterr.str_)+1]) == 0)
			str_ = "";
		else
			strcpy(str_, rterr.str_);
		return *this;
	}
#endif /* __NO_STRING_CTOR */

    virtual ~runtime_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
#	ifndef __NO_STRING_CTOR
    { ; }  
#	else
	{ delete[] str_; }
#	endif
#else
    ;
#endif

    virtual const char * what () const  _RWSTD_THROW_SPEC_NULL
    {
#ifndef __NO_STRING_CTOR
        return str_.data();
#else
		return str_;
#endif
    }

#ifndef __NO_STRING_CTOR
  private:
    string str_;
#else
  protected:
	char* str_;
#endif
};

class _RWSTDExport range_error : public runtime_error
{
  public:
#ifndef __NO_STRING_CTOR
    range_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
      : runtime_error(what_arg) {;}
#else // for OS9 (tag)
	range_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: runtime_error(what_arg)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	range_error(const range_error& rerr) _RWSTD_THROW_SPEC_NULL
		: runtime_error(rerr.str_)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	range_error& operator= (const range_error rerr) _RWSTD_THROW_SPEC_NULL
	{
		runtime_error::operator=(rerr);
		return *this;
	}
#endif /* __NO_STRING_CTOR */
    virtual ~range_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

class _RWSTDExport overflow_error : public runtime_error
{
  public:
#ifndef __NO_STRING_CTOR
    overflow_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
      : runtime_error(what_arg) {;}
#else // for OS9 (tag)
	overflow_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: runtime_error(what_arg)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	overflow_error(const overflow_error& oferr) _RWSTD_THROW_SPEC_NULL
		: runtime_error(oferr.str_)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	overflow_error& operator= (const overflow_error& oferr)
	{
		runtime_error::operator=(oferr);
		return *this;
	}
#endif /* __NO_STRING_CTOR */
    virtual ~overflow_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

class _RWSTDExport underflow_error : public runtime_error
{
  public:
#ifndef __NO_STRING_CTOR
    underflow_error (const string& what_arg) _RWSTD_THROW_SPEC_NULL 
      : runtime_error(what_arg) {;}
#else // for OS9
	underflow_error(const char* what_arg) _RWSTD_THROW_SPEC_NULL
		: runtime_error(what_arg)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	underflow_error(const underflow_error& oferr) _RWSTD_THROW_SPEC_NULL
		: runtime_error(oferr.str_)
	{ ; }
	// Not defined in ANSI C++ WP but needed here
	underflow_error& operator=(const underflow_error& oferr) _RWSTD_THROW_SPEC_NULL
	{
		runtime_error::operator=(oferr);
		return *this;
	}
#endif /* __NO_STRING_CTOR */
	
    virtual ~underflow_error ()  _RWSTD_THROW_SPEC_NULL
#ifndef HPPA_WA
    { ; }  
#else
    ;
#endif
};

#define __RWSTD_EXCEPT_SEEN

#ifndef _RWSTD_NO_NAMESPACE 
} 
#endif

#endif /*__RWSTD_EXCEPT_SEEN*/

//
// Yes, the complete file has been processed!
//
#define __STD_STDEXCEPT

#endif /*__STD_STDEXCEPT*/
