 nam TickGeneric.a
 ttl Generic ticker driver for OS9/68K

********************
* Generic ticker driver

* Copyright 1987, 1988, 1993 by Microware Systems Corporation
* Reproduced Under License

* This source code is the proprietary confidential property of
* Microware Systems Corporation, and is provided to licensee
* solely for documentation and educational purposes. Reproduction,
* publication, or distribution in any form to any party other than
* the licensee is strictly prohibited.

******************************************************
* Edition History
*
*  #    Date      Comments                                  By
* -- -------- --------------------------------------------- ---
* 00 87/08/06 First hacked into shape                       jal
* 00 87/09/11 Altered to call StartTick as subroutine       jal
* 01 87/09/11 Changed to attempt link at runtime to         jal
*             "rtclock" module for setting or reading a
*             real time clock device
* 01 87/09/14 Changed label names for tick device to avoid  jal
*             name clashes
* 01 87/09/16 Masked IRQs at beginning of Init routine      jal
* 02 87/10/27 Added F$UnLink call for "rtclock" module to   jal
*             avoid racking up the link count
* 02 87/10/27 Added "SetTime" and "GetTime" labels for      jal
*             calling the subroutines in the "rtclock" module
* 03 87/10/27 Removed interrupt masking code; rewrote exits jal
*             to do the F$UnLink call inline (if needed)
*             (the Unlink subroutine has been deleted)
* 04 87/10/30 Rewrote exits to merge them and adjusted the  jal
*             stack operations; no longer saving d0
* 04 87/10/30 Added E$NoClk error code in NoRTC error exit  jal
* 05 87/11/24 Added a2,a6 preservation around Set/Getime    jal
* 06 87/11/25 Added error abort if StartTick returns error. wwb
*             Added StackFrame tracking.
*             Moved "rtclock" name string to 'before code'.
* 07 88/06/02 fixed testing for "was time passed".          wwb
*             ---- OS-9/68K V2.3 Release ----
*             ---- OS-9/68K V2.4 Release ----
* 08 93/03/11 redid use pathlists for correct case.			wwb
*             reworked stack usage for long-alignment.		wwb
* 09 93/07/01 reworked use pathlists for MWOS structure.	wwb
*             ---- OS-9/68K V3.0 released ----
*             ---- OS-9/68K V3.1 released ----
* 10 00/01/3  closed possible race condition for D_Tick not mgh
*               being set when first ticker interrupt occurs
* 11 00/01/05 Move load of a3 higher so base address of     mgh
*              ticker ALWAYS gets passed to RTC module calls.
*              Was only doing it for first call. Most RTC
*              modules don't use it but believed it was passed.
*
Edition	equ	11
Revision equ 0

Type_Lang set (Systm<<8)!Objct
Attr_Rev set ((ReEnt+SupStat)<<8)!Revision

 psect Clock,Type_Lang,Attr_Rev,Edition,0,TickInit

 use <oskdefs.d>
 use <os9svc.m>
  

********************************
* Expected variables and constants:
* 
* The following variables and constants must be defined
* by the hardware specific tick driver file:
*
* TiksPerSec - (Ticks Per Second) - Pretty self-explanatory.
* ClockVect - clock vector
* ClockPrior - clock priority
*
* NOTE: These should be for the ticker device,
*       not the RTC! (unless they're the same device.)


********************
* RTC module name
*
ClockName:  dc.b "rtc68990",0       *name of real time clock module
    align
    
********************
* Offsets in "rtclock" module for subroutine calls
*
GetTime equ 0 get-time is at module entry point
SetTime equ 4 set-time is next entry

 page
********************************
* TickInit: Intialization routine
*
* Passed: (a5) = Address of caller's registers stack
*         (a6) = System Global Data Pointer
*
TickInit:
    movem.l d1/a0-a4,-(a7)      *save d1/a0-a3 and make space for status

Status  set 4*5                 *set level of stacking to status reg save
ErrCode set 0                   *set level of stacking to return d1

    moveq.l #0,d0               *ensure carry clear
* andi.w  #$f7ff,sr           *enable IRQs -rlm
    move.w  sr,Status(a7)       *save the condition codes
    suba.l  a2,a2               *clear a2 for later use in link detection
    movea.l #ClockPort,a3       *get the ticker address
    tst.w   D_TckSec(a6)        *is clock already running?
    bne.s   SkipTick            *if yes, skip ticker initialization
    move.w  #TicksPerSec,D_TckSec(a6)   *set systems tick rate

* Kernel sets this again on return .. Can't be 0 if IRQ occurs.
    move.w  D_TckSec(a6),D_Tick(a6)     * set systems current tick
*
* Put the Ticker in the polling table
*
    move.b  #ClockVect,d0       *get vector number
    move.b  #ClockPrior,d1      *get priority
    lea.l   TickIRQ(pc),a0      *get address of service routine
    os9     F$IRQ               *put ticker in polling table
    bcs.s   ErrExit             *if error on F$IRQ call, exit
*
* Initialize ticker chip and enable it for tick IRQs
*
    bsr     StartTick           *initialize the ticker chip
    bcs.s   ErrExit             *..abort if error
*
* Link to real time clock module ("rtclock")
*
SkipTick:
    move.w  #(Sbrtn<<8)+Objct,d0    *set RTC type/language
    lea.l   ClockName(pc),a0        *get address of clock module name
    OS9     F$Link                  *try to link to the clock module (alters a1,a2)
    bcc.s   RTCFound                *if link succeeds, go call RTC subroutine
*
* no rtclock module was found
*

    tst.w   R$d1+2(a5)              *was date info passed ?
    bne.s   Exit                    *if yes, go exit with no error
    move.w  #E$NoClk,d1             *get "No Clock" error code
 bra.s ErrExit exit with no clock error
*
* Determine if SetTime or GetTime
* (a1 = address of subroutine jump table)
*
RTCFound:
    movem.l a2/a6,-(a7)     *save the regs

Status      set Status+(2*4)    *track stacking
FrameSave   set Status          *extra copy

 tst.w R$d1+2(a5) was date info passed ?

    bne.s   Setime          *if yes, go set time in RTC chip
*
* Get the time from the RTC
*
    jsr     GetTime(a1)     *get the time from the RTC
    movem.l (a7)+,a2/a6     *retrieve the regs
Status      set Status-(2*4)    *track stacking
    bcs.s   ErrExit             *exit with error (if any)
    move.l  d1,D_Year(a6)       *set system gregorian date
    OS9     F$Julian            *convert to julian date
 move.l d1,D_Julian(a6) set julian date
 neg.l d0
 add.l #24*60*60,d0 convert to seconds until midnight
 move.l d0,D_Second(a6) set julian time
 bra.s Exit exit with no error 
*
* Set the time in the RTC
*
Status set FrameSave reset stack tracking

Setime movem.l R$d0(a5),d0-d1 get time/date data
 jsr SetTime(a1) set the time in the RTC
 movem.l (a7)+,a2/a6 retrieve the regs
Status set Status-(2*4) track stacking
 bcc.s Exit go exit with no error (if no error)
 
 page
 
********************
* Error exit
*
ErrExit:
*!**** DEBUGGING ****
 move.l  #$BADC10C4,d7      *'BADCLOCK'
 jmp 3(pc)
*!**** DEBUGGING ****

    move.l  d1,ErrCode(a7)      *put error code in d1 (on the stack)
    ori.w   #Carry,Status(a7)   *return carry set (in ccr on the stack)
*
* Exit
*
Exit:
 move.l a2,d0 was a valid link made?
 beq.s Exit10 if no, skip the unlink call
 OS9 F$UnLink unlink the RTC module (ignore any error)
Exit10:
    move.w  Status(a7),ccr      *set error status
    movem.l (a7)+,d1/a0-a3      *restore d1/a0-a3
    addq.l  #4,a7               *toss scratch for status
Status  set Status-(4*5)

 ifne Status
 fail Stack level imbalance
 endc

 rts

 ends
