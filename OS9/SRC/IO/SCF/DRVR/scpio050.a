 nam scpio050
 ttl parallel interface driver for VME050 printer port

* Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993 by
* Microware Systems Corporation.
* Reproduced Under License

* This source code is the proprietary confidential property of
* Microware Systems Corporation, and is provided to licensee
* solely for documentation and educational purposes. Reproduction,
* publication, or distribution in any form to any party other than
* the licensee is strictly prohibited.
********************************
* Edition History:
*  #   Date    Comments                                          by
* -- -------- -------------------------------------------------  ---
* 00 86/10/27 genesis.                                           wwb
* 01 86/10/30 ..grumble..grumble..it works!                      wwb
*              ---- OS-9/68K V2.0 Release ---- 
* 02 87/03/23 Changed module attr to Supervisor State process.   wwb
*              ---- OS-9/68K V2.1 Release ---- 
*              ---- OS-9/68K V2.2 Release ---- 
* 03 88/05/24 removed reliance on 'BusWidth' from external file. wwb
* 04 88/06/16 reorganized Init somewhat, added OS9svc usage.     wwb
*              ---- OS-9/68K V2.3 Release ---- 
* 05 90-03-05 Changed to check for deadly signal ala 2.4 defs    Rwb
*             ---- OS-9/68K V2.4 released ----
*105 91-08-30 Added KANJI condition								 zoo
*             ---- OS-9/68K V2.4J released ----
* 06 92-02-24 Merged ed105 into mainstream.                      wwb
* 07 92-08-27 changed case in use statement, no code changes     Rwb
* 08 93-02-10 reworked V_IRQMsk usage for MSP support.           wwb
* 09 93/07/01 reworked use pathlists for MWOS structure.         wwb
*              ---- OS-9/68k V3.0 released ----
*              ---- OS-9/68k V3.1 released ----
*
Edition equ 9 current edition number


********************************
* Scpio050 Device Driver

Typ_Lang set (Drivr<<8)+Objct device driver, object code
Attr_Rev set ((ReEnt+SupStat)<<8)+0 attributes and revision

 psect scpio050,Typ_Lang,Attr_Rev,Edition,0,scpioent

 use defsfile


 ifdef	KANJI

 use "knjwrite.a"

 endc KANJI

********************
* Macro definitions
*

 use <os9svc.m>


* dostrobe:  macro to assert/negate printer strobe
*
dostrobe macro
 move.b #Strobe_ON,Strobe(a3) turn strobe ON
 swap d0 delay about 1uS
 swap d0
 move.b #Strobe_OF,Strobe(a3) and then OFF
 endm
 pag
********************
* Definitions
*
BuffSize equ 500 I/O buffer size

* device port offsets

BW set 2 devices addressed "every other byte"
 org 0
DataPort do.b BW data register (write only)
Strobe do.b BW strobe register (write d3=strobe data; read=clear ack/irq)
Status do.b BW printer status (read only)
Prime do.b BW printer input prime (write d3 only)

* printer strobe definitions

Strobe_OF equ %00001000 printer strobe inactive
Strobe_ON equ %00000000 printer strobe active

* input prime definitions

Prime_OFF equ %00001000 input prime off
Prime_ON equ %00000000 input prime on

* status definitions

Select equ %00000001 printer selected
Busy equ %00000010 printer busy
Fault equ %00000100 printer fault
Ack equ %10000000 printer acknowledge
Select_b equ 0 select bit #
Busy_b equ 1 busy bit #
Fault_b equ 2 fault bit #
Ack_b equ 7 acknowledge bit #

* Bus Interrupter Module (BIM) definitions

BIM.PCont equ $c6-$80 offset to BIM 1 printer control (from port base)
BIM.PVect equ $ce-$80 offset to BIM 1 printer vector (from port base)
BIM_Level equ %00000111 BIM irq level mask
BIM_IRAC equ %00001000 irq auto-clear flag
BIM_IRE equ %00010000 irq enable flag
BIM_INX equ %00100000 internal*/external irq flag
BIM_FAC equ %01000000 flag auto-clear flag
BIM_F equ %10000000 flag flag
b_IRAC equ 3 irq enable auto-clear bit
b_IRE equ 4 irq enable bit
b_INX equ 5 internal*/external irq enable bit
b_FAC equ 6 flag auto clear bit
b_F equ 7 flag bit
BIMOn equ BIM_IRE+BIM_IRAC BIM mode: irq enable, irq auto-clear
BIMOff equ 0 disable BIM irq control
b_irqflag equ b_IRE the bit flag to test for irq's
BIM_Idle equ $0f vector value for un-initialized vector


********************
* Static Storage
*
 vsect
V_BufPtr ds.l 1 i/o buffer ptr
V_BufEnd ds.l 1 end of buffer ptr
V_NxtIn ds.l 1 next in ptr
V_NxtOut ds.l 1 next out ptr
V_IRQMsk ds.w 1 interrupt mask word
V_Ready ds.b 1 port ready flag
V_Data ds.b 1 data in buffer flag
V_Buffer ds.b BuffSize beginning of buffer
 ends


***************
* Entry Offset Table
*
scpioent dc.w SCInit initialization routine
 dc.w SCRead read routine
 ifndef	KANJI
 dc.w SCWrite write routine
 dc.w SCGetStt get status routine
 dc.w SCSetStt set status routine
 else
 dc.w WrtKanji kanji write routine
 dc.w KpGetStt get status routine
 dc.w KpSetStt set status routine
 endc KANJI
 dc.w SCTerm terminate routine
 dc.w 0 exception handler (0=none)
 pag
***************
* SCInit - initialize hardware
*
* Passed: (a1) = device descriptor ptr
*         (a2) = static storage ptr
*         (a6) = system global data ptr
*
* Returns:  Carry set, d1.w = error code if error
*
* Destroys:  a0, a3, d0, d1, d2
*
SCInit: lea.l V_Buffer(a2),a0 get buffer ptr
 move.l a0,V_BufPtr(a2) set buffer ptr
 move.l a0,V_NxtIn(a2) set next in ptr
 move.l a0,V_NxtOut(a2) set next out ptr
 lea.l BuffSize(a0),a0 get end of buffer ptr
 move.l a0,V_BufEnd(a2) set end ptr
 ifdef	KANJI
 bsr K_Set
 endc KANJI

* form interrupt mask value.
* NOTE: the IRQMasking is always performed "outside" of the Interrupt
* Service context, thus move.w V_IRQMsk(a2),sr is ok, as there will not
* be an accidental stack switch.
*
 move.b M$IRQLvl(a1),d2 get irq level
 asl.w #8,d2 shift into priority
 move.w sr,d0 get sr (for stack/trace flags)
 andi.w #IntEnab,d0 clear irq masks
 or.w d0,d2 form "current stack, irqs masked to this level" value
 move.w d2,V_IRQMsk(a2) save for future use

* add device to irq polling table

 move.b M$Vector(a1),d0 get vector number
 move.b M$Prior(a1),d1 get priority
 lea.l SCIRQ(pc),a0 addr of service routine
 movea.l V_PORT(a2),a3 get port addr
 OS9 F$IRQ Add to irq polling table
 bcs.s InitExit ..exit if error

* init printer port

 move.w sr,d6 save irq masks
 move.w V_IRQMsk(a2),sr mask interrupts
 tst.b Strobe(a3) read strobe to clear any ack/irq
 move.b M$IRQLvl(a1),d2 get irq hardware level
 ori.b #BIMOn,d2 add BIM control to irq level
 move.b d0,BIM.PVect(a3) set up vector in BIM
 move.b d2,BIM.PCont(a3) enable BIM for printer irqs
 tst.b Strobe(a3) read strobe to clear any ack/irq
 move.w d6,sr restore sr
 moveq.l #0,d1 flag no error
InitExit: rts return   

 pag
********************
* SCRead - read character from parallel port
*
* Passed: (a1) = path descriptor ptr
*         (a2) = static storage ptr
*         (a4) = process descriptor ptr
*         (a6) = system global data pointer
*
* Returns: Carry set, (d1.w) = E$EOF
*
SCRead: move.w #E$EOF,d1 return "End of File" error
 ori.b #Carry,ccr set carry
 rts


********************
* SCGetStt - get status routines
*
* Passed: (a1) = path descriptor ptr
*         (a2) = static storage ptr
*         (a6) = system global data pointer
*       (d0.w) = function code
*
* Returns:  Carry set, d1.w = E$UnkSvc
*
SCGetStt: move.w #E$UnkSvc,d1 return "Unknown Service Request"
 ori.b #Carry,ccr set carry
 rts return


********************
* SCSetStt - set status routines
*
* Passed: (a1) = path descriptor ptr
*         (a2) = static storage ptr
*         (a6) = system global data pointer
*       (d0.w) = function code
*
* Returns:  Carry set, d1.w = E$UnkSvc
*
SCSetStt: equ SCGetStt same as get status
 pag
********************
* SCTerm - Terminate processing.  Remove from polling table.
*
* Passed: (a1) = device descriptor ptr
*         (a2) = static storage
*         (a4) = current process descriptor ptr
*         (a6) = system global data ptr
*
* Returns: none
*
SCT_A bsr.s SCSleep wait for port ready

SCTerm: movea.l V_PORT(a2),a3 get port address
 move.w P$ID(a4),d0 get process id
 move.w d0,V_BUSY(a2) mark user of port...
 move.w d0,V_LPRC(a2) ..in case of signals
 move.w sr,d6 save interrupt masks
 move.w V_IRQMsk(a2),sr mask irqs
 move.b V_Data(a2),d1 is buffer empty?
 bne.s SCT_A ..No; Wait
 move.w d6,sr restore sr
 
SCTerm_B tst.b V_Ready(a2) now, wait for final irq to set port ready
 bne.s SCTerm_B
 
 move.b Strobe(a3),d0 clear any possible ints pending
 move.b #BIMOff,BIM.PCont(a3) disable printer on BIM
 move.b #BIM_Idle,BIM.PVect(a3) set vector to idle value
 move.b M$Vector(a1),d0 get vector number
 suba.l a0,a0 set zero address
 OS9 F$IRQ remove port from polling tbl
 rts
 pag
***************
* SCSleep - Sleep until port is ready
*
* Passed: d6.w = save of SR
*         (a1) = path descriptor ptr
*         (a2) = static storage ptr
*         (a4) = current process descriptor ptr
*         (a6) = system global data pointer
*
* Returns: Carry = Set if signal error
*
* Destroys: a0
*
SCSleep: move.w V_BUSY(a2),V_WAKE(a2) set wake-up call
 move.w d6,sr restore sr
 move.l d0,-(a7) save d0
 moveq.l #0,d0 wait for signal
 OS9svc F$Sleep call sleep directly
 move.w P$Signal(a4),d0 signal waiting?
 beq.s SCSleep_B ..No; check status 
 cmpi.w #S$Deadly,P$Signal(a4) deadly signal?
 blo.s SCSleep_C ..Yes; return error
SCSleep_B: btst.b #Condemn,P$State(a4) has process died?
 bne.s SCSleep_C ..yes; exit
 move.l (a7)+,d0 return restore d0, clear carry
 rts

SCSleep_C: move.l (a7)+,d0 restore d0
 ori.b #Carry,ccr set carry to flag signal/death
 rts
 pag
***************
* SCWrite - Write one byte to parallel port
*
* Passed: (a1) = path descriptor ptr
*         (a2) = static storage ptr
*         (a4) = process descriptor ptr
*         (a6) = system global data pointer
*       (d0.b) = char to write to port
*
* Returns: Carry,d1 set if Error
*
* Destroys: d1, a3

SCW_A bsr.s SCSleep wait for port
 bcs.s SCW_Z abort if error
 ifdef	KANJI
Write:
 endc KANJI
SCWrite: movea.l V_PORT(a2),a3 get port ptr
 move.w sr,d6 save interrupt masks
 move.w V_IRQMsk(a2),sr mask irqs
 tst.b V_Ready(a2) is port ready?
 beq.s SCW_G branch if so
 tst.b V_Data(a2) is data in buffer?
 bne.s SCW_E branch if so
 move.b Status(a3),d1 get port status

* normally, the Busy line will be asserted when the printer is
* Busy, Deselected or in a Fault condition

 btst.l #Busy_b,d1 is printer busy ?
 bne.s SCW_E ..yes; simply buffer char
 btst.l #Ack_b,d1 what about the state of ACK ?
 bne.s SCW_F ..if deasserted, then printer ready for data
SCW_E bsr.s BuffIn put byte in buffer
 bcs.s SCW_A branch if not successful
 move.w d6,sr restore sr
 moveq.l #0,d1 clear Carry
 rts

SCW_F tst.b Strobe(a3) clear interrupt
 bset.b #b_irqflag,BIM.PCont(a3) set flag to detect next irq
SCW_G move.b #1,V_Ready(a2) set port not ready
 move.w d6,sr restore sr
 move.b d0,DataPort(a3) write byte
 dostrobe assert port strobe
SCW_Z rts
 pag
********************
* BuffIn - put character into buffer
*
* Passed:  (a1) = path descriptor ptr
*          (a2) = static storage ptr
*        (d0.b) = character to buffer
*
* Returns:  Carry set if buffer full
*
* Destroys: a0
*
BuffIn: movea.l V_NxtIn(a2),a0 get next in ptr
 tst.b V_Data(a2) already data in buffer?
 beq.s BufI_A branch if not
 cmpa.l V_NxtOut(a2),a0 is buffer full?
 bne.s BufI_B branch if not
 ori.b #Carry,ccr set Carry
 rts

BufI_A move.b #1,V_Data(a2) set data in buffer flag
BufI_B move.b d0,(a0)+ put byte in buffer
 cmpa.l V_BufEnd(a2),a0 end of buffer?
 bcs.s BufI_C branch if not
 movea.l V_BufPtr(a2),a0 get buffer ptr
BufI_C move.l a0,V_NxtIn(a2) update next in ptr
 rts


********************
* BuffOut - read character from buffer
*
* Passed:  (a1) = path descriptor ptr
*          (a2) = static storage ptr
*
* Returns:  Carry set if buffer empty, else
*           (d0.b) = character to buffer
*
* Destroys: a0
*
BuffOut: tst.b V_Data(a2) is there data in buffer?
 bne.s BufO_A branch if so
 ori.b #Carry,ccr set Carry
 rts

BufO_A movea.l V_NxtOut(a2),a0 get next out ptr
 move.b (a0)+,d0 get byte from buffer
 cmpa.l V_BufEnd(a2),a0 end of buffer?
 bcs.s BufO_B branch if not
 movea.l V_BufPtr(a2),a0 reset next out ptr
BufO_B move.l a0,V_NxtOut(a2) update next out ptr
 cmpa.l V_NxtIn(a2),a0 is buffer empty?
 bne.s BufO_C branch if not
 clr.b V_Data(a2) clear data in buffer flag
BufO_C moveq.l #0,d1 clear Carry
 rts
 pag
***************
* SCIRQ - process parallel port interrupt
*
* Passed: (a2) = static storage
*         (a3) = port address
*         (a6) = system global data pointer
*
* Returns:  Carry = Set if interrupt not serviced
*
* OS-9/68000 V2.0 Release comments:
* The kernel only preserves d0, d1, a0, a2, a3 and a6.
* All other registers used must be preserved by this routine.
*
SCIRQ: btst.b #b_irqflag,BIM.PCont(a3) printer interrupt ?
 beq.s SCIRQ_0 ..yes; continue
 ori.b #Carry,ccr no, was not
 rts

SCIRQ_0: tst.b Strobe(a3) clear interrupt
 bsr.s BuffOut get byte from buffer
 bcs.s SCIRQ_A branch if empty
 move.b d0,DataPort(a3) write it
 bsr.s SCIRQ_B latch
 
 btst.l #Busy_b,d0 is busy line asserted ?
 bne.s SCIRQ_X ..yes; leave next char till when ready
 btst.l #Ack_b,d0 is ACK asserted ?
 bne.s SCIRQ_0 ..no; printer ready for data now, so keep on pumping
SCIRQ_X bset.b #b_irqflag,BIM.PCont(a3) re-enable BIM interrupts
 rts

SCIRQ_A clr.b V_Ready(a2) set port ready
 bra.s SCIRQ_C

SCIRQ_B dostrobe strobe the data

SCIRQ_C move.w V_WAKE(a2),d0 is there waiting process?
 beq.s SCIRQ_D ..no; return
 moveq.l #S$Wake,d1 (wake up)
 OS9svc F$Send call send directly
 clr.w V_WAKE(a2)
SCIRQ_D bset.b #b_irqflag,BIM.PCont(a3) re-enable BIM interrupts
 move.b Status(a3),d0 return port ready status
 rts

 ends
 
