 nam SC68302
 ttl Interrupt-Driven driver for M68302 on-board SCC's

* Copyright 1991, 1993, 1996 by Microware Systems Corporation
* Reproduced Under License

* This source code is the proprietary confidential property of
* Microware Systems Corporation, and is provided to licensee
* solely for documentation and educational purposes. Reproduction,
* publication, or distribution in any form to any party other than
* the licensee is strictly prohibited.

***************
* Edition History

* #   date      Comments                                        by
* -- -------- ------------------------------------------------- ---
* 01 91/03/25 Converted from 68681 driver						rag
* 02 91/04/10 Fixed bug in SS_Sig and loss of null bytes		rag
* 03 91/05/03 Changed 'bset's for SCCE to 'move.b' as multiple
*             interrupts were reset at once						rag
* 04 93/10/21 reworked for MWOS structure.						wwb
* 05 93/11/08 reworked for IRQMask issues (MSP/ISP), removed    wwb
*             (unnecessary) IRQ masking in interrupt service
*             routines.
*				---- OS-9/68K V3.0 Release ----
* 06 96/09/13 Fixed bugs in BitPar								jam
*				---- OS-9/68K V3.1 Release ----
* 07 99/07/03 CF3044 restore registers on ErrNtRdy error        srm
*
Edition equ 7 current Edition number

Typ_Lang set (Drivr<<8)+Objct
Attr_Rev set ((ReEnt+SupStat)<<8)+0

 psect sc68302,Typ_Lang,Attr_Rev,Edition,0,M68302Ent

 use defsfile

 pag
********************
* Macro Definitions
*
 use <os9svc.m>

 pag
********************
* Definitions
*
Signbit set 7

 ifdef IPBUF
 ifeq IPBUF-1
 fail must specify a value for IPBUF
 endc
InpSiz set IPBUF set user defined buffer size
 else
InpSiz set 80 input buffer size
 endc IPBUF
 ifdef OPBUF
 ifeq OPBUF-1
 fail must specify a value for OPBUF
 endc
OutSiz set OPBUF set user defined buffer size
 else
OutSiz set 140 output buffer size
 endc OPBUF
MinBuff equ 20 Send XON when buffer contains this few
MaxBuff equ InpSiz-MinBuff Send XOFF when buffer contains this many

 pag
**********
* Static storage offsets
*
 vsect
InFill ds.l 1 input buffer next-in ptr
InEmpty ds.l 1 input buffer next-out ptr
InEnd ds.l 1 end of input buffer
OutFill ds.l 1 output buffer next-in ptr
OutEmpty ds.l 1 output buffer next-out ptr
OutEnd ds.l 1 output buffer end of buffer pointer
BaseAddr ds.l 1 base address of port

InCount ds.w 1 # of chars in input buffer
OutCount ds.w 1 # of chars in output buffer
IRQMask ds.w 1 Interrupt mask word
Globl ds.w 1 offset to global masks
SigPrc ds.w 3 signal on data ready process (pid, signal, path)
 ifdef DCDSIG
DCDPrc ds.w 3 signal for DCD transitions process (pid, signal, path)
 endc DCDSIG

ConReg	ds.w 1 Offset to the SCC's configuration Registers
BufOff	ds.w 1 Offset to RX buffer in 68302 dual port RAM
IVal	ds.w 1 Value to reset an interrupt in the ISR or unmask one in the IMR
StopTX	ds.b 1 Value to write to the Config register for a STOPTX command
StartTX	ds.b 1 Value to write to the Config register for a RESTTX command
BaudRate ds.b 1 baud rate value
Parity ds.b 1 current parity value
InHalt ds.b 1 input halted flag (non-zero if XON has been Sent)
OutHalt ds.b 1 output IRQ's disabled when non-Zero
InpBuf ds.b InpSiz input buffer
OutBuf ds.b OutSiz output buffer
 ends

* OutHalt bit numbers (causes of disabled output IRQ)

H_XOFF equ 0 V_XOFF has been received; awaiting V_XON
H_Empty equ 1 output buffer is empty


********************
* Entry jump table
*
M68302Ent dc.w Init
 dc.w Read
 dc.w Write
 dc.w GetStat
 dc.w SetStat
 dc.w Term
 dc.w 0 Exception handler entry (0=none)


 ttl INTERRUPT-DRIVEN 68302 on-board SCC device routines
 pag
***************
* Init
*   Initialize (Terminal) Port of M68302
*
* Passed:  (a1) = device descriptor address
*          (a2) = static storage address
*          (a4) = process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
* Destroys: (may destroy d0-d7, a0-a5)
*
Init:
 movem.l d0/d2/a3-a4,-(sp)

* initialize static storage
 move.b #(1<<H_Empty),OutHalt(a2) output IRQ's disabled; buffer empty
 move.w #0,OutCount(a2) no chars in output buffer
 move.w #0,InCount(a2) no chars in input buffer
 lea.l InpBuf(a2),a0 init buffer pointers
 move.l a0,InFill(a2) 
 move.l a0,InEmpty(a2)
 lea.l InpSiz(a0),a0 figure size of buffer
 move.l a0,InEnd(a2) mark end of input buffer
 lea.l OutBuf(a2),a0 point to start of output buf
 move.l a0,OutFill(a2) init output buff pointers
 move.l a0,OutEmpty(a2)
 lea.l OutSiz(a0),a0 figure size of out buff
 move.l a0,OutEnd(a2) mark end of output buffer

* form interrupt mask value.
* NOTE: the IRQMasking is always performed "outside" of the Interrupt
* Service context, thus move.w IRQMask(a2),sr is ok, as there will not
* be an accidental stack switch.
*
 move.b M$IRQLvl(a1),d2 get irq level
 asl.w #8,d2 shift into priority
 move.w sr,d0 get sr (for stack/trace flags)
 andi.w #IntEnab,d0 clear irq masks
 or.w d0,d2 form "current stack, irqs masked to this level" value
 move.w d2,IRQMask(a2) save for future use

 ifndef POLLED_IO

* initialize vector register and add device to system polling table

 move.b M$Vector(a1),d0 get descriptor's vector
 move.b M$Prior(a1),d1 get priority
 lea.l M68302IRQ(pc),a0 address of interrupt service routine
 OS9 F$IRQ Add to IRQ polling table
 bcs.s InitExit ..exit if error

 endc ifndef POLLED_IO

* initialize port configuration
*
 bsr SetSCCInfo
 bcs.s InitExit error occurred (bad Port address passed)

 move.l BaseAddr(a2),a3 get base of 68302 registers/dual port RAM
 move.b StopTX(a2),CR(a3)

 movea.l V_PORT(a2),a4 get base address of parameter RAM
 clr.l d1
 move.w BufOff(a2),d1 get the offset to the dual port RAM buffer
 move.l d1,RxBD0+Buffer(a4)
 addq #1,d1
 move.l d1,TxBD0+Buffer(a4)
 bsr InitParams Initialise Parameter RAM offsets from a4

 move.w ConReg(a2),d1 get offset to configuration registers
 move.b PD_BAU-PD_OPT+M$DTyp(a1),d0 get baud rate
 move.b d0,BaudRate(a2) store for later
 bsr BaudCalc set baud rate
 bcs.s InitExit ..exit if error
 move.b PD_PAR-PD_OPT+M$DTyp(a1),d0 get stop bits, bit/char & parity
 move.b d0,Parity(a2) store for later
 bsr BitPar set stop bits, parity, & bits per char
 bcs.s InitExit ..exit if error

 move.b StartTX(a2),CR(a3)

*! Finally enable the transmitter and receiver
 move.w ConReg(a2),d0

 ifdef HWSHAKE if we're to use the SCC RTS/CTS flow control
 ori.w #ASYNC+ENR+ENT,SCM(a3,d0.w) TX & RX enabled
 else
 ori.w #ASYNC+D_SOFT+ENR+ENT,SCM(a3,d0.w) TX & RX enabled
 endc HWSHAKE

 ifndef POLLED_IO
 move.b #TXEV+RXEV,SCCM(a3,d0.w) Allow TX and RX interrupts to occur

 move.w IMR(a3),d0
 or.w IVal(a2),d0 set bit to enable ints for this SCC
 move.w d0,IMR(a3)

 endc ifndef POLLED_IO

InitExit:  movem.l (sp)+,d0/d2/a3-a4
 rts

***************
* SetSCC Info
*   Set up static storage to reflect this SCC
*
* Passed:  	(a2) = static storage address -> uses V_PORT(a2)
*
* Returns:	none
* Error Return:  (cc) = carry set
*                d1.w = error code
*
* Destroys: none
*
SetSCCInfo:
 movem.l d0/a0/a3/a5,-(sp)
 movea.l V_PORT(a2),a0 I/O port address (actually parameter RAM address)

* generate the base address of the 68302 registers
 move.l a0,d0 get port address
 andi.l #$fffff800,d0 mask off parameter RAM offset
 movea.l d0,a3 set register base
 movea.l d0,a5 copy for later use
 move.l d0,BaseAddr(a2)

* work out which of the 3 SCC's we're accessing
 move.l a0,d0 get port address again
 lsr.l #8,d0 get parameter RAM offset to be 4,5, or 6
 andi.l #7,d0
 subq #4,d0 get to range 0-3
 lsl.w #1,d0 convert for word offset into tables

 lea.l ConTable(pc),a0
 move.w (a0,d0.w),ConReg(a2) get the offset to the config registers
 bmi.s SSErr illegal return value

* get offset to the RX buffer in the dual ported RAM
* N.B. The TX buffer is RX buffer address plus 1
 lea BufTable(pc),a0
 move.w (a0,d0.w),BufOff(a2)
 bmi.s SSErr

* get the value for enabling an interrupt via the Interrupt Mask
* Register (IMR) and resetting an interrupt via the In Service
* Register (ISR)
 lea ITable(pc),a0
 move.w 0(a0,d0.w),IVal(a2)
 bmi.s SSErr

* finally set up the values for 'STOPTX' and 'STARTTX' commands for 
* the config register
 move.b d0,-(sp)
 ori.b #RESTTX+FLG,d0
 move.b d0,StartTX(a2)
 move.b (sp)+,d0
 ori.b #STOPTX+FLG,d0
 move.b d0,StopTX(a2)

SSExit movem.l (sp)+,d0/a0/a3/a5
 rts

SSErr movem.l (sp)+,d0/a0/a3/a5
 move.w #E$Param,d1
 ori.b #Carry,ccr
 rts

ConTable: 
 dc.w $0880	SCC1 base for configuration registers
 dc.w $0890 SCC2 
 dc.w $08A0 SCC3
 dc.w $ffff Illegal port address passed to Init

BufTable:
 dc.w $0000 SCC1 RX Buffer Offset (TX is RX Buffer + 1)
 dc.w $0002 SCC2
 dc.w $0004 SCC3
 dc.w $ffff Illegal ports address passed to Init
 
ITable:
 dc.w 1<<b_SCC1
 dc.w 1<<b_SCC2
 dc.w 1<<b_SCC3
 dc.w $ffff

*********************
* ParamSet - set up the SCC Parameter RAM values
InitParams:
 move.w d0,-(sp)
* SCC Parameter RAM
 move.b #0,RFCR(a4)
 move.b #0,TFCR(a4)
 move.w #1,MRBLR(a4)				*! 1 RX character per buffer
 move.b	#RxBD0,RBDNUM(a4)			*! RX Buffer uses first RX buffer descriptor
 move.b #TxBD0,TBDNUM(a4)			*! TX Buffer uses first TX Buffer descriptor

* UART-specific parameter RAM
 move.w #0,MAX_IDL(a4)				*! 0 idles after enter hunt mode
 move.w #0,BRKCR(a4)				*! 0 break sequences after stop transmit
 move.w #CCE,CHARACTER1(a4)			*! No control chars

* Set up the buffer descriptors
* N.B. The buffer addresses are set up by the routine calling InitParams
*
 move.w #1,RxBD0+DataLen(a4)		*! 1 char in the buffer
 move.w #1,TxBD0+DataLen(a4)		*! 1 char in buffer
 ifdef POLLED_IO
 move.w #RXE+RXW,RxBD0(a4)			*! Rx Buffer 0 available to CP, last buffer
 move.w #TXW,TxBD0(a4)				*! Tx Buffer 0 is last buffer
 else
 move.w #RXE+RXI+RXW,RxBD0(a4)		*! As above with interrupt generation
 move.w #TXI+TXW,TxBD0(a4)			*! Ditto
 endc ifdef POLLED_IO
 move.w (sp)+,d0
 rts

 pag
********************
* BaudCalc:  initialize baud rate of device
*
* Passed:  d0.b = OS-9 baud rate code
*          d1.w = Offset to SCC configuration Registers
*          (a2) = static storage ptr
*          (a3) = Base Address of 68302
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
BaudCalc: movem.l d0-d3/a0/a5,-(sp) save reg
 lea.l 0(a3,d1.w),a5 set up address of config registers
 andi.w #$00ff,d0 mask out all except baud rate
 cmpi.w #MaxBaud,d0 legal baud rate ?
 bge.s BadMode ..no; return error
 lsl.w #1,d0 multiple by 2 for word offset
 lea.l BaudTable(pcr),a0 get table address
 move.w (a0,d0.w),d1 get baud rate value for chip
 bmi.s BadMode ..exit if unsupported rate
 move.w d1,SCON(a5) set baud rate in device
 movem.l (sp)+,d0-d3/a0/a5 restore register
 rts return (carry clear)

* here if illegal or unsupported baud-rate

BadMode: movem.l (sp)+,d0-d3/a0/a5

BadMode10: move.w #E$BMode,d1 get error code
 ori.b #Carry,ccr set the carry
 rts return

* Baud rate table:

BaudTable:
 dc.w $ffff	0 - 50 baud unavailable
 dc.w $ffff	1 - 75 baud unavailable
 dc.w $ffff	2 - 110 baud unavailable
 dc.w $ffff	3 - 134.5 baud unavailable
 dc.w B150	4 - 150 baud
 dc.w B300	5 - 300 baud
 dc.w B600	6 - 600 baud
 dc.w B1200	7 - 1200 baud
 dc.w $ffff	8 - 1800 baud unavailable
 dc.w $ffff	9 - 2000 baud unavailable
 dc.w B2400	A - 2400 baud
 dc.w $ffff	B - 3600 baud unavailable
 dc.w B4800	C - 4800 baud
 dc.w $ffff	D - 7200 baud unavailable
 dc.w B9600	E - 9600 baud
 dc.w B19200 F - 19.2k baud
 dc.w B38400 10 - 38.4 baud

MaxBaud: equ *-BaudTable
   
 pag
******************************
* BitPar:  set bits/character, # stop bits, parity mode
*          
* Passed:  d0.b = device configuration
*                 bits 1,0:  0 = no parity
*                            1 = odd parity
*                            3 = even parity
*                 bits 3,2:  0 = 8 bit data
*                            1 = 7 bit data
*                            2 = 6 bit data
*                            3 = 5 bit data
*                 bits 5,4:  0 = 1 stop bit
*                            1 = 1.5 stop bits
*                            2 = 2 stop bits
*          d1.w = Offset to SCC configuration Registers
*          (a2) = static storage pointer
*          (a3) = 68302 base address
*
* Assumes:  Tx and Rx bits turned off before entry
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
BitPar: movem.l d0-d3/a0/a5,-(sp) save register
 lea.l 0(a3,d1.w),a5 set up address of config registers
 moveq.l #0,d2 sweep d2
 andi.w #$00ff,d0 clear high end of word
 move.w d0,d1 copy parity value
 andi.w #3,d1 isolate parity code
 lsl.w #1,d1 convert to word offset
 lea.l TabPar(pc),a0 point at parity mode table
 move.w (a0,d1.w),d2 get parity code
 cmpi.w #$ffff,d2 compare to illegal value in TabPar table
 beq.s BadMode ..exit if illegal value
 move.w d0,d1 get data bit size
 lsr #2,d1 makelegal index
 andi.w #3,d1 make legal index
 lsl.w #1,d1 convert to word offset
 lea.l TabBC(pc),a0 point at bits/char table
 move.w (a0,d1.w),d3 get bits/char
 bmi.s BadMode
 or.w d3,d2
 move.w d0,d1 get stop bit value
 lsr.w #4,d1 make index value
 andi.w #3,d1 make legal index
 lsl.w #1,d1 convert to word offset
 lea.l TabSB(pc),a0 point at stop bit table
 move.w (a0,d1.w),d3 get stop bit value
 bmi.s BadMode ..exit if illegal value 
 or.w d3,d2
 andi.w #$0ebf,SCM(a5) clear par and stop and bits/char fields in SCM before setting
 or.w d2,SCM(a5)
BitPar20: movem.l (sp)+,d0-d3/a0/a5 restore a0
 rts return (carry clear)
 
TabPar:
 dc.w $00 no parity
 dc.w PEN odd parity (only need to enable parity)
 dc.w $ffff illegal value
 dc.w PEN+R_EVEN+T_EVEN even parity
 
TabBC:
 dc.w CL8 8 bits per char
 dc.w $00 7 bits per char
 dc.w $ffff 6 bits per char
 dc.w $ffff 5 bits per char
 
TabSB:
 dc.w $00 1 stop bit
 dc.w $ffff 1.5 stop bits (for 5 bit data) - illegal for 68302 SCCs
 dc.w STOP2 2 stop bits
 dc.w $ffff illegal value
 
 pag
********************
* Read:s  Return one byte of input from a 68302 SCC
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = current process descriptor
*          (a6) = system global ptr
*
* Returns:  (d0.b) = input char
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
* Destroys: a0
*
 ifdef POLLED_IO
Read:
 movem.l d1-d2/a3-a4,-(sp)
 movea.l V_PORT(a2),a4 get parameter RAM base address
 movea.l BaseAddr(a2),a3
 move.w BufOff(a2),d2 get dual port RAM buffer offset
Read10 move.w RxBD0(a4),d1 RX char available ?
 btst #15,d1
 bne.s Read10 ..no; wait for one
 move.b 0(a3,d2.w),d0 read char from buffer
 move.w #RXE+RXW,RxBD0(a4) Denote buffer now available to CP
 movem.l (sp)+,d1-d2/a3-a4
Read90 rts

 else 	*! Interrupt driven Read routine

Read00 move.w V_BUSY(a2),V_WAKE(a2) arrange wake up signal
 move.w (sp)+,sr restore IRQs
 movem.l (sp)+,d1-d2/a3
 bsr M68302Sleep

Read: movem.l d1-d2/a3,-(sp)
 movea.l BaseAddr(a2),a3 get 68302 base address
 move.w ConReg(a2),d2 get offset to this SCC's config registers
 tst.b InHalt(a2) is input halted?
 ble.s Read_a branch if not
 cmpi.w #MinBuff,InCount(a2) buffer mostly emptied?
 bhi.s Read_a ..No; continue
 movea.l V_PORT(a2),a0 get parameter RAM address
 clr.w d1
 move.b V_XON(a2),d1 get X-ON char
 move.w sr,-(sp) save current IRQ status
 move.w IRQMask(a2),sr mask IRQs
 clr.b InHalt(a2) clean up XOFF flag
 or.w #CCE+CCREA+CCI,d1
 move.w d1,CHARACTER8(a0) Write Char to buffer
 ori.b #Sign,d1 set Sign bit
 move.b d1,InHalt(a2) flag input resume
 ori.b #RXEV,SCCM(a3,d2.w) re-enable Receive Interrupts
 move.w (sp)+,sr unmask IRQs
Read_a tst.w SigPrc(a2) a process waiting for device?
 bne.s ReadErrNtRdy ..Yes; return dormant terminal error
 move.w sr,-(sp) save current IRQ status
 move.w IRQMask(a2),sr mask IRQs
 tst.w InCount(a2) any data?
 beq.s Read00 branch if not
 move.w (sp)+,sr unmask IRQs
 movea.l InEmpty(a2),a0 point to next char
 move.b (a0)+,d0 get character
 subq.w #1,InCount(a2) dec buffer size by one
 cmpa.l InEnd(a2),a0 at end of buffer?
 blo.s Read_b branch if not
 lea.l InpBuf(a2),a0 point to start of buffer
Read_b move.l a0,InEmpty(a2) update buffer pointer
 movem.l (sp)+,d1-d2/a3
 move.b V_ERR(a2),PD_ERR(a1) copy I/O status to PD
 beq.s Read90 .. no error
 clr.b V_ERR(a2)
 move.w #E$Read,d1
 ori.b #Carry,ccr
Read90 rts
ReadErrNtRdy: movem.l (sp)+,d1-d2/a3 restore register
 endc ifdef POLLED_IO
ErrNtRdy: move.w #E$NotRdy,d1
 ori.b #Carry,ccr return Carry set
 rts

 pag
********************
* M68302Sleep:  Sleep until interrupt occurs
*
* Passed:  (a2) = driver global storage
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code (signal)
*
* Destroys:  possibly PC
*
M68302Sleep:
 ifndef POLLED_IO
 move.l d0,-(sp) save reg
 moveq.l #0,d0 sleep indefinately
 OS9svc F$Sleep wait for interrupt (*only works with Sleep 0*)
 move.w P$Signal(a4),d1 signal present?
 beq.s ACSL90 ..no; return
 cmpi.w #S$Deadly,d1 Deadly signal?
 blo.s ACSLER ..yes; return error
ACSL90 btst.b #Condemn,P$State(a4) has process died?
 bne.s ACSLER ..Yes; return error
 move.l (sp)+,d0 restore register, clear carry
 rts

ACSLER addq.l #8,sp Exit to caller's caller
 ori.b #Carry,ccr return Carry set

 endc ifndef POLLED_IO
 rts

 pag
********************
* Write
*   Output one character via 68302 SCC
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*          d0.b = char to write
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
 ifdef POLLED_IO
Write: movem.l d1-d2/a3-a4,-(sp)
 movea.l V_PORT(a2),a4 get parameter RAM base address
 movea.l BaseAddr(a2),a3 get 68302 base address
 move.w BufOff(a2),d2 get offset to SCC RX buffer
Write00 move.w TxBD0(a4),d1	Get Transmit Buffer Info
 btst #15,d1 Can we write to buffer?
 bne.s Write00 ..no
 move.b d0,1(a3,d2.w) write data to TX buffer
 move.w #TXR+TXW,TxBD0(a4) .. and transmit it
 movem.l (sp)+,d1-d2/a3-a4
 rts return

 else

Write00 move.w V_BUSY(a2),V_WAKE(a2) arrange wake up signal
 move.w (sp)+,sr restore IRQs
 movem.l (sp)+,d1-d2/a3-a4
 bsr.s M68302Sleep

Write: movem.l d1-d2/a3-a4,-(sp)
 move.w sr,-(sp)
 move.w IRQMask(a2),sr mask IRQs
 movea.l V_PORT(a2),a4 get address of SCC Parameter RAM
 movea.l BaseAddr(a2),a3 get base address of 68302
 move.w OutCount(a2),d2 get output buffer data count
 bne.s Write20 .. data in buffer so continue as normal
 move.w TxBD0(a4),d1 get TX buffer status
 btst #15,d1 transmitter busy?
 bne.s Write20 Yes, so buffer char and let interrupts deal with transmission
 btst.b #H_XOFF,OutHalt(a2) output halted as XOFF received?
 bne.s Write20 .. yes, so buffer character
* Enable transmit interrupts and output the first character
 move.w ConReg(a2),d1 get offset to config registers
 ori.b #TXEV,SCCM(a3,d1.w) enable TX interrupts
 move.w BufOff(a2),d2 get offset to RX Buffer
 move.b d0,1(a3,d2.w) put data in TX buffer
 move.w #TXR+TXW+TXI,TxBD0(a4) .. and send the char
 bra.s Write80
Write20 cmpi.w #OutSiz,d2 room for more data?
 bhs.s Write00 ..no; wait for room
 addq.w #1,OutCount(a2) increment byte count
 movea.l OutFill(a2),a0 point to next char location
 move.b d0,(a0)+ store char and inc pointer
 cmpa.l OutEnd(a2),a0 end of buffer?
 blo.s Write50 branch if not
 lea.l OutBuf(a2),a0 point to start of buffer
Write50 move.l a0,OutFill(a2) update buffer pointer
 bclr.b #H_Empty,OutHalt(a2) clear output buffer empty flag
 beq.s Write80 ..if data was in buffer, no need to re-enable irqs
 btst.b #H_XOFF,OutHalt(a2) output currently halted ?
 bne.s Write80 ..yes; don't enable irqs
 move.w ConReg(a2),d1 get offset to config registers
 ori.b #TXEV,SCCM(a3,d1.w) enable TX interrupts
Write80 move.w (sp)+,sr unmask IRQs 
 movem.l (sp)+,d1-d2/a3-a4
 moveq.l #0,d1 clear carry
 rts

 endc ifdef POLLED_IO

 pag
********************
* GetStat:  get device status
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = process descriptor
*          (a5) = caller's register stack ptr
*          (a6) = system global data ptr
*          d0.w = status call function code
*
* Returns:  varies with function code
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
GetStat:
 ifndef POLLED_IO

* return data available count
*
 cmpi.w #SS_Ready,d0 Ready status?
 bne.s GetSta10 ..no
 clr.w R$d1(a5) sweep high word of register
 move.w InCount(a2),R$d1+2(a5) return input char count to caller
 beq ErrNtRdy ..No data; return not ready error
 rts (Carry clear)

* return eof status
*
GetSta10 cmpi.w #SS_EOF,d0 End of file?
 beq.s GetSta99 ..yes; return (Carry clear)

* check for "get options"
*
 cmpi.w #SS_Opt,d0 get options call ?
 bne.s Unknown ..no; return error for unknown request

* update path descriptor for currently active baud, parity
*
 move.b BaudRate(a2),PD_BAU(a1) set currently active baud rate
 move.b Parity(a2),PD_PAR(a1) set currently active comms mode
 rts (carry clear)

* return error for unknown service requests
*
Unknown: move.w #E$UnkSvc,d1 Unknown service code
 ori.b #Carry,ccr return Carry set
 endc
GetSta99: rts

 pag
********************
* SetStat:  set device status
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = process descriptor
*          (a5) = caller's register stack ptr
*          (a6) = system global data ptr
*          d0.w = status call function code
*
* Returns:  varies with function code
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
SetStat:
 ifndef POLLED_IO

* signal process on data available
*
 cmpi.w #SS_SSig,d0 signal process when ready?
 bne.s SetSta_A ..No
 tst.w SigPrc(a2) somebody already waiting?
 bne ErrNtRdy ..Yes; error
 move.w PD_CPR(a1),d0 get caller's process ID
 move.w R$d2+2(a5),d1 get signal code
 move.w sr,-(sp) save IRQ status
 move.w IRQMask(a2),sr disable IRQs
 tst.w InCount(a2) any Data available?
 bne.s SetSta10 yes, signal Data ready
 move.w PD_PD(a1),d2 get associated path #
 movem.w d0-d2,SigPrc(a2) save process id, signal, path #
 movea.l BaseAddr(a2),a3 get base of 68302
 move.w ConReg(a2),d2 get offset to config registers
 ori.b #RXEV,SCCM(a3,d2.w) ensure Receive Interrupts enabled
 move.w (sp)+,sr unmask IRQs
 moveq.l #0,d1 clear carry

 rts

SetSta10 move.w (sp)+,sr restore IRQ status
 OS9svc F$Send
 moveq.l #0,d1
 rts

* release all signal conditions
*
SetSta_A cmpi.w #SS_Relea,d0 Release Device?
 bne.s SetSta_B bra if not
 move.w PD_CPR(a1),d0 get process id
 move.w PD_PD(a1),d2 get associated path #
 lea.l SigPrc(a2),a3 check SigPrc

 ifdef DCDSIG
 bsr.s ClearSig
 lea.l DCDPrc(a2),a3 now check DCDPrc
 endc DCDSIG

ClearSig cmp.w (a3),d0 is signal for this process ?
 bne.s ClearSig20 ..no; exit
 cmp.w 4(a3),d2 does it concern this path ?
 bne.s ClearSig20 ..no; exit
 clr.w (a3) clear down signal condition
ClearSig20 moveq.l #0,d1 flag no error
 rts return

 ifdef DCDSIG

* signal on DCD transitions
*
SetSta_B cmpi.w #SS_DCOn,d0 signal on carrier detect?
 bne.s SetSta_C .. no
 move.w PD_CPR(a1),d0 get process id
 move.w R$d2+2(a5),d1 get signal code
 move.w PD_PD(a1),d2 get associated path #
 movea.l BaseAddr(a2),a3 get 68302 base address
 move.w ConReg(a2),d3 get config registers offset
 move.w sr,-(sp)
 move.w IRQMask(a2),sr
 move.w SCCS(a3,d3.w),d3 get status register contents

 btst #b_DCD,d3 DCD already asserted?
 bne SetSta30 .. yes, send the signal
 bra.s SetSta20

SetSta_C cmpi.w #SS_DCOff,d0 on loss of carrier?
 bne.s SetSta_D .. no
 move.w PD_CPR(a1),d0 get process id
 move.w R$d2+2(a5),d1 get signal code
 move.w PD_PD(a1),d2 get associated path #
 movea.l BaseAddr(a2),a3 get 68302 base address
 move.w ConReg(a2),d3 get config registers offset
 move.w sr,-(sp)
 move.w IRQMask(a2),sr
 move.w SCCS(a3,d3.w),d3 get status register contents

 btst #b_DCD,d3 DCD already low?
 beq SetSta30 .. yes, send the signal

SetSta20 move.w (sp)+,sr
 OS9svc F$Send
 moveq.l #0,d1
 rts

SetSta30
 movem.w d0-d2,DCDPrc(a2) save proc id, code and path
 ori.b #CDEV,SCCM(a3) set for interrupt on change in DCD
 move.w (sp)+,sr restore IRQ masks
 rts (carry clear)

 else
SetSta_B equ *
 endc DCDSIG

 pag
* change path options
*
SetSta_D cmpi.w #SS_Opt,d0 set options call ?
 bne.s SetSta_E branch if not

* here to check whether baud/parity have changed

CheckMode: move.b PD_BAU(a1),d0 get baud rate current
 cmp.b BaudRate(a2),d0 has it changed ?
 bne.s ChngMode ..yes; attempt to re-configure
 move.b PD_PAR(a1),d1 get port configuration
 cmp.b Parity(a2),d1 has communication mode changed ?
 beq.s SetSta90 ..no; exit (nothing to do)
ChngMode:
 movea.l BaseAddr(a2),a3 get 68302 base address
 move.b StopTX(a2),CR(a3) stop the transmitter
 move.w ConReg(a2),d1 get the offset to the config registers to d1
 andi.w #^(ENT+ENR),SCM(a3,d1.w) disable TX and RX
 move.b PD_BAU(a1),d0 get the new baud rate
 move.b d0,BaudRate(a2)
 bsr BaudCalc .. attempt to set it
 bcs.s ChngExit ..exit if error
 move.b PD_PAR(a1),d0 get parity, etc
 move.b d0,Parity(a2)
 bsr BitPar attempt to change communication mode
ChngExit move.w sr,-(sp) save ccr status
 move.b StartTX(a2),CR(a3)
 ori.w #ENT+ENR,SCM(a3,d1.w) re-enable TX and RX
 rtr restore ccr and return

* new path open
*
SetSta_E cmpi.w #SS_Open,d0 new path opened ?
 beq.s CheckMode ..yes; then check for configuration changes

* if we get here it's a call not supported by this driver
 bra Unknown

SetSta90 moveq.l #0,d1 clear Carry
 endc ifndef POLLED_IO
 rts
 pag
********************
* Term:  Terminate 68302 SCC processing
*
* Passed:  (a1) = device descriptor pointer
*          (a2) = static storage
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  none
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
TRMN00
 ifndef POLLED_IO
 move.w V_BUSY(a2),V_WAKE(a2) arrange wake up signal
 move.w (sp)+,sr restore IRQs
 pea.l Term(pc) return to entry point if signals
 bsr M68302Sleep wait for interrupt
 addq.l #4,sp toss return address if no signals

Term: move.w P$ID(a4),d0
 move.w d0,V_BUSY(a2)
 move.w d0,V_LPRC(a2)
 move.w sr,-(sp) save current IRQ status
 move.w IRQMask(a2),sr mask IRQs
 btst.b #H_Empty,OutHalt(a2) any data?
 beq.s TRMN00 .. yes, wait
*
* As we do not know if the SCC has completed the transfer of its internal
* buffers we need to sleep a while to allow for transmission to be completed.
*
* NOTE: The sleep time is specified in 'ticks' which are assumed to occur
* every 10 mS. If they occur differently the sleep value will need to be
* changed.
*
 moveq.l #3,d0
 cmpi.b #6,BaudRate(a2) Baud rate less than 600 baud?
 bhi.s Term20
 moveq.l #8,d0
Term20 OS9 F$Sleep
 movea.l BaseAddr(a2),a3
 move.b StopTX(a2),CR(a3) stop the transmitter
 move.w ConReg(a2),d1 get config registers offset
 andi.b #^(TXEV+RXEV),SCCM(a3,d1.w) stop TX and RX interrupts
 andi.w #^(ENT+ENR),SCM(a3,d1.w) disable TX and RX
 move.w IMR(a3),d0
 move.w IVal(a2),d1 get 'interrupt enable' value for this SCC
 not.w d1
 and.w d0,d1
 move.w d1,IMR(a3) disable this SCC's interrupts
Term40 move.w (sp)+,sr restore IRQ masks
 move.b M$Vector(a1),d0 get vector #
 suba.l a0,a0
 OS9 F$IRQ remove IRQ from polling tbl
 rts

 else POLLED_IO defined

Term:
 rts

 endc

 pag
 ifndef POLLED_IO
********************
* M68302IRQ:  Process interrupt (input or output) from 68302 SCC
*
* Passed:  (a2) = Static Storage addr
*          (a3) = port address ptr
*          (a6) = system global data ptr
*
* Returns:  (cc) = carry set if false interrupt, else clear
*
* Destroys:  May only destroy D0, D1, A0, A2, A3 and A6.  Any
*            other registers used MUST be preserved.
*
M68302IRQ:
 movea.l BaseAddr(a2),a3 point to base of port
 move.w ConReg(a2),d1 get config register offset to d1
 move.b SCCE(a3,d1.w),d0 Get the SCC pending interrupts

 btst #b_RXEV,d0 receive interrupt?
 bne InIRQ yes

 btst #b_TXEV,d0 transmit interrupt?
 bne.s OutIRQ

 ifdef DCDSIG
 btst #b_CDEV,d0 DCD status changed?
 bne.s DCDIRQ
 endc DCDSIG

* Not an interrupt we were expecting if we get here
NotOurs: 
 ori.b #Carry,ccr return with carry set
 rts

 pag
********************
* OutIRQ:  68302 SCC output interrupt service
*
* Passed:  (a2) = static storage address
*          (a3) = 68302 base address
*          (a6) = system globals
*          d1.w = offset to configuration registers
*
OutIRQ: 
* Edition #3 changes
* bset #b_TXEV,SCCE(a3,d1.w) reset the bit in the event register
 move.b #TXEV,SCCE(a3,d1.w)
* End of Edition #3 changes
OutI_a move.w OutCount(a2),d1 Get data count
 beq.s OutIRQ2 .. no chars to send
 subq.w #1,d1 taking one char
 move.l a1,-(sp) save a1
 movea.l V_PORT(a2),a0 get the base of the SCC parameter RAM
 movea.l OutEmpty(a2),a1 get pointer to next char
* no need to check if the buffer's free as the interrupt is due
* to a character being transmitted
 move.w BufOff(a2),d0
 move.b (a1)+,1(a3,d0.w) put data in buffer
 move.w #TXR+TXW+TXI,TxBD0(a0) transmit data
 cmpa.l OutEnd(a2),a1 end of buffer?
 blo.s OutI_1 branch if not
 lea.l OutBuf(a2),a1 point to start
OutI_1 move.l a1,OutEmpty(a2) update pointer
 movea.l (sp)+,a1 
 move.w d1,OutCount(a2) update char count
 cmpi.w #MinBuff,d1 ready for more data?
 bhi.s WakeUp10 .. no
 bra.s WakeUp

OutIRQ2 bset.b #H_Empty,OutHalt(a2) flag halted; buffer empty
 move.w ConReg(a2),d1 get offset to config registers
 andi.b #^TXEV,SCCM(a3,d1.w) disable transmit interrupts
WakeUp: move.w V_WAKE(a2),d0 Owner waiting?
 beq.s WakeUp10 ..no; return
 clr.w V_WAKE(a2)
 moveq.l #S$Wake,d1 Wake up signal

SendSig: OS9svc F$Send wake up process

WakeUp10
 move.w IVal(a2),ISR(a3) reset pending SCC interrupt
 moveq.l #0,d1
 rts

 pag
********************
* InIRQ:  68302 SCC input interrupt service
*
* Passed:  (a2) = static storage address
*          (a3) = 68302 base address
*          (a6) = system globals
*          d1.w = offset to configuration registers
*
* Notice the Absence of Error Checking Here
*
InIRQ:
* Edition #3 Changes
* bset #b_RXEV,SCCE(a3,d1.w) reset the bit in the event register
 move.b #RXEV,SCCE(a3,d1.w) reset the bit in the event register
* End of Edition #3 changes
 move.w d1,-(sp)
 move.w BufOff(a2),d1
 movea.l V_PORT(a2),a0 get the parameter RAM address
 move.b 0(a3,d1.w),d0 get the RX data
 move.w #RXE+RXI+RXW,RxBD0(a0) signal buffer available to CP
 move.w (sp)+,d1
* Ed #2 addition from here
 tst.b d0 is it a null byte?
 beq.s InIRQ5 .. yes, so cannot be a control code
* End of Ed #2 addition
 cmp.b V_XON(a2),d0 X-ON continue?
 beq InXON ..Yes
 cmp.b V_XOFF(a2),d0 X-OFF Immediate Pause request?
 beq InXOFF ..Yes
 cmp.b V_INTR(a2),d0 keyboard Interrupt?
 beq InAbort ..Yes
 cmp.b V_QUIT(a2),d0 keyboard Quit?
 beq InQuit ..Yes
 cmp.b V_PCHR(a2),d0 keyboard Pause?
 beq InPause ..Yes
InIRQ5 move.l a1,-(sp) save a1
 movea.l InFill(a2),a1 point to current char
 move.b d0,(a1)+  write char to buffer
 addq.w #1,InCount(a2) count character
 cmpi.w #InpSiz,InCount(a2) buffer full?
 bls.s InIRQ10 branch if not
 subq.w #1,InCount(a2) uncount character
 addq.b #1,V_ERR(a2) show error
 move.l (sp)+,a1 restore a1
 bra WakeUp exit

InIRQ10 cmp.l InEnd(a2),a1 end of buffer?
 blo.s InIRQ30 branch if not
 lea.l InpBuf(a2),a1 point to start of buffer
InIRQ30 move.l a1,InFill(a2) update next in pointer
 move.l (sp)+,a1 restore a1
 move.w SigPrc(a2),d0 any process to notify?
 beq.s InIRQ40 ..no
 move.w SigPrc+2(a2),d1 get signal code
 clr.w SigPrc(a2) disable signal sending
 bra SendSig signal waiting process & return

InIRQ40 clr.w d0
 move.b V_XOFF(a2),d0 get X-OFF char
 beq WakeUp .. not enabled, exit
 cmpi.w #MaxBuff,InCount(a2) is buffer almost full?
 blo WakeUp .. no
 move.b InHalt(a2),d1 have we sent XOFF?
 bne WakeUp yes then don't send it again
 bclr.l #Signbit,d0 insure Sign clear
 move.b d0,V_XOFF(a2)
 ori.b #Sign,d0 set Sign bit
 move.b d0,InHalt(a2) flag input halt
 ori.w #CCE+CCREA+CCI,d0 set for XOFF char transmission
 move.w d0,CHARACTER8(a0)
 move.w ConReg(a2),d1
 andi.b #^RXEV,SCCM(a3,d1.w)
 bra WakeUp
 pag

********************
* Control character routines
*
* Passed:  (a2) = static storage address
*          (a3) = 68302 base address
*          (a6) = system globals
*          d1.w = offset to configuration registers
*

InPause: tst.l V_DEV2(a2) any echo device?
 beq InIRQ5 buffer char and exit if not
 move.l a1,-(sp) save it
 movea.l V_DEV2(a2),a1 get echo device static ptr
 move.b d0,V_PAUS(a1) request pause
 move.l (sp)+,a1 restore it
 bra InIRQ5 buffer char and exit

InAbort: moveq.l #S$Intrpt,d1 keyboard INTERRUPT signal
 bra.s InQuit10

InQuit: moveq.l #S$Abort,d1 Abort signal

InQuit10 move.b d0,-(sp) save input char
 move.w V_LPRC(a2),d0 last process ID
 beq.s InQuit90 ..none; exit
 clr.w V_WAKE(a2)
 OS9svc F$Send send signal to last user
InQuit90 move.b (sp)+,d0 restore input char
 bra InIRQ5 buffer char, exit

InXON: bclr.b #H_XOFF,OutHalt(a2) enable output
* re-enable the transmit ints
 ori.b #TXEV,SCCM(a3,d1.w)
 move.w TxBD0(a0),d1 is a character currently being transmitted?
 btst #15,d1
 bne WakeUp .. yes, wait for it to interrupt after it's gone
 bra OutI_a

InXOFF: bset.b #H_XOFF,OutHalt(a2) flag output restricted
* disable transmit ints
 andi.b #^TXEV,SCCM(a3,d1.w)
 moveq.l #0,d1
 bra WakeUp

 ifdef DCDSIG
DCDIRQ: move.w DCDPrc(a2),d0 any process to signal?
 beq WakeUp .. no
 andi.b #^CDEV,SCCM(a3,d1) disable interrupt on change in DCD
* we don't need to check the current status as the interrupt is due to
* status changing. If the status had been as requested then the signal
* would have been sent immediately and the interrupt would not have
* been enabled.
 move.w DCDPrc+2(a2),d1 get the signal code
 clr.w DCDPrc(a2) disable further signal sending
 bra SendSig
 endc DCDSIG

 endc POLLED_IO
 ends
