* @(#)sc8250.a	1.4 88/08/04

	nam	sc8250
	ttl	Interrupt-Driven UART driver

***************
* Edition History

* #   date      Comments                                        by
* -- -------- ------------------------------------------------- ---
*  1 88/06/21 Adapted to the 8250				                ADP
*  2 90/05/03 change signal test for 2.4 release                Rwb
*  3 93/03/22 Reworked to maintain stack alignment and proper 
*			  handling of the interrupt mask.					afh
*  4 93/07/01 reworked use pathlists for MWOS structure.		wwb
*
Edition	equ	4	current Edition number


Typ_Lang	set	(Drivr<<8)+Objct
Attr_Rev	set	((ReEnt+SupStat)<<8)+0

	psect	UART,Typ_Lang,Attr_Rev,Edition,0,UARTEnt

	use	defsfile

	pag

********************
* Definable Options:
*
* These options control various features of the driver.  They should
* be invoked via "ifdef" conditionals.  The best way to invoke them
* is to define the conditional on the command line of the assembler
* using the "-a" option e.g. -a=DCDSIG.  The currently supported
* options for the driver are:
*
* DCDSIG:  DCD Transition support.
* This conditional defines whether the driver will support sending of
* a signal to a process when a DCD transition occurs.  NOTE that only the
* code required in SetStat is invoked by this conditional, HOWEVER there
* still needs to be written a hardware specific routine in the IRQ
* service parts to written so that the signal will be sent.
*
* IPBUF/OPBUF:  set input/output buffer sizes.
* These conditionals allow overriding of the default buffer sizes by
* giving the size on the assembler command line.
*


********************
* Macro Definitions
*
 use <os9svc.m>


	pag
********************
* Definitions
*
Signbit	set	7

	ifdef	IPBUF
	ifeq	IPBUF-1
	fail	must specify a value for IPBUF
	endc
InpSiz	set	IPBUF	set user defined buffer size
	else
InpSiz	set	160	input buffer size
	endc	IPBUF
	ifdef	OPBUF
	ifeq	OPBUF-1
	fail	must specify a value for OPBUF
	endc
OutSiz	set	OPBUF	set user defined buffer size
	else
OutSiz	set	140	output buffer size
	endc	OPBUF
MinBuff	equ	32	Send XON when buffer contains this few
MaxBuff	equ	InpSiz-MinBuff	Send XOFF when buffer contains this many

BrkTime	equ	$80000000+128	break sent for 500mSec.

TxDefault	equ	0	no TxCTS control

	pag
********************
* Register offset definitions.
*
UARTData	equ	0	Data register (DLAB=0)
UARTIrEn	equ	1	Interrupt Enable register (DLAB=0)
UARTLDiv	equ	0	Low byte of divisor Latch (DLAB=1)
UARTHDiv	equ	1	High byte of divisor Latch (DLAB=1)
UARTIrId	equ	2	Interrupt Identification register
UARTLCtrl	equ	3	Line control register
UARTMCtrl	equ	4	Modem control register
UARTLStat	equ	5	Line control register
UARTMStat	equ	6	Modem control register

* UARTIrEn Interrupt Enable Register bit positions
UAERBFI		equ	%00000001	Enable Receive Data Avail Intr.
UAETBEI		equ	%00000010	Enable Transmitter Hold Empty Intr.
UAELSI		equ	%00000100	Enable Receiver Line Status Intr.
UAEDSSI		equ	%00001000	Enable Modem Status Intr.

* UARTIrId Interrupt Identification Register bit positions
UAIrPend	equ	%00000001	Interrupt pending if 0
UAIrId		equ	%00000110	Interrupt Identification bits
*	The above two bits can have the following values
UAIrLStat	equ	%00000110	Receiver Line Status change
UAIrRcvAv	equ	%00000100	Receive Data Available
UAIrTraEm	equ	%00000010	Transmitter Hold Empty
UAIrMStat	equ	%00000000	Modem Status change

* UARTLCtrl Line Control Register bit positions
UAWLS		equ	%00000011	Word Length Select bits
*	Values for above Word Length Select bits
UAWLS5		equ	%00000000	5 bit Word Length 
UAWLS6		equ	%00000001	6 bit Word Length 
UAWLS7		equ	%00000010	7 bit Word Length 
UAWLS8		equ	%00000011	8 bit Word Length 
UASTB		equ	%00000100	# of Stop bits (0=1 bit,1=2 bits)
UAPAR		equ	%00001000	Parity Enable (1=Enable Parity)
UAEPS		equ	%00010000	Even Parity Select (0=odd,1=even)
UASBRK		equ	%01000000	Set Break Bit (1=Break level)
UADLAB		equ	%10000000	Divisor Latch Access Bit (DLAB)

* UARTMCtrl Modem Control Register bit positions 
UADTR		equ	%00000001	Data Terminal Ready bit
UARTS		equ	%00000010	Request to Send bit
UAOUT1		equ	%00000100	Output 1 
UAOUT2		equ	%00001000	Output 2
*	OUT2 is commonly used in PC Modems to enable interrupts
UALOOP		equ	%00010000	Loop Mode Bit

* UARTLStat Line Status Register bit positions
UADR		equ	%00000001	Data Ready
UAOR		equ	%00000010	Overrun Error
UAPE		equ	%00000100	Parity Error
UAFE		equ	%00001000	Framing Error
UABI		equ	%00010000	Break Interrupt
UATHRE		equ	%00100000	Transmit Hold Register Empty
UATSRE		equ	%01000000	Transmitter Shift Register Empty

UAOR_B		equ	1		Overrun Error bit position
UAPE_B		equ	2		Parity Error bit position
UAFE_B		equ	3		Framing Error bit position

* UARTMStat Modem Status Register bit positions
UADCTS		equ	%00000001	Delta CTS
UADDSR		equ	%00000010	Delta DSR
UATERI		equ	%00000100	Trailing Edge Ring Indicator
UADRLSD		equ	%00001000	Delta Receive Line Signal Detect (DCD)
UACTS		equ	%00010000	CTS
UADSR		equ	%00100000	DSR
UARI		equ	%01000000	Ring Indicator (RI)
UARLSD		equ	%10000000	Receive Line Signal Detect (DCD)

	pag
**********
* Static storage offsets
*
	vsect
InFill	ds.l	1	input buffer next-in ptr
InEmpty	ds.l	1	input buffer next-out ptr
InEnd	ds.l	1	end of input buffer
OutFill	ds.l	1	output buffer next-in ptr
OutEmpty ds.l	1	output buffer next-out ptr
OutEnd	ds.l	1	output buffer end of buffer pointer

InCount	ds.w	1	# of chars in input buffer
OutCount ds.w	1	# of chars in output buffer
IRQMask	ds.w	1	Interrupt mask word
SigPrc	ds.w	3	signal on data ready process (pid, signal, path)
	ifdef	DCDSIG
DCDPrcOn ds.w	3	signal for DCD off->on transition (pid, signal, path)
DCDPrcOff ds.w	3	signal for DCD on->off transition (pid, signal, path)
	endc	DCDSIG

BaseAddr ds.l	1	base address of port
BaudRate ds.b	1	baud rate value
Parity	ds.b	1	current parity value
InHalt	ds.b	1	input halted flag (non-zero if XON has been Sent)
OutHalt	ds.b	1	output IRQ's disabled when non-Zero
Otpt_On	ds.b	1	Value to enable acia output IRQs
Otpt_Off ds.b	1	Value to disable acia output IRQs
RTSstate ds.b	1	Current State of the RTS pin
TXmode	ds.b	1	Tx handshake mode
InpBuf	ds.b	InpSiz	input buffer
OutBuf	ds.b	OutSiz	output buffer
	ends

* OutHalt bit numbers (causes of disabled output IRQ)

H_XOFF	equ	0	V_XOFF has been received; awaiting V_XON
H_Empty	equ	1	output buffer is empty


********************
* Entry jump table
*
UARTEnt	dc.w	Init
	dc.w	Read
	dc.w	Write
	dc.w	GetStat
	dc.w	PutStat
	dc.w	TrmNat
	dc.w	0	Exception handler entry (0=none)


	ttl	INTERRUPT-DRIVEN Uart device routines
	pag
***************
* Init
*   Initialize (Terminal) UART
*
* Passed:  (a1) = device descriptor address
*          (a2) = static storage address
*          (a4) = process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
* Destroys: (may destroy d0-d7, a0-a5)
*
Init:

* initialize static storage

	move.b	#(1<<H_Empty),OutHalt(a2)	output IRQ's disabled; buffer empty
	lea.l	InpBuf(a2),a0	init buffer pointers
	move.l	a0,InFill(a2)	
	move.l	a0,InEmpty(a2)
	lea.l	InpSiz(a0),a0	figure size of buffer
	move.l	a0,InEnd(a2)	mark end of input buffer
	lea.l	OutBuf(a2),a0	point to start of output buf
	move.l	a0,OutFill(a2)	init output buff pointers
	move.l	a0,OutEmpty(a2)
	lea.l	OutSiz(a0),a0	figure size of out buff
	move.l	a0,OutEnd(a2)	mark end of output buffer

* form interrupt mask value.
* NOTE: the IRQMasking is always performed "outside" of the Interrupt
* Service context, thus move.w IRQMask(a2),sr is ok, as there will not
* be an accidental stack switch.
*
	move.b M$IRQLvl(a1),d2 get irq level
	asl.w #8,d2 shift into priority
	move.w sr,d0 get sr (for stack/trace flags)
	andi.w #IntEnab,d0 clear irq masks
	or.w d0,d2 form "current stack, irqs masked to this level" value
	move.w d2,IRQMask(a2) save for future use

	ifdef	DCDSIG
	clr.w	DCDPrcOn(d2)	reset DCD change variables
	clr.w	DCDPrcOff(d2)	
	endc	DCDSIG

*  set interrupt enable/disable flags

	move.b	#UAERBFI!UAETBEI!UAELSI!UAEDSSI,Otpt_On(a2)
	move.b	#^UAETBEI,Otpt_Off(a2)

* see if device is installed

	move.l	V_PORT(a2),a3	get device address in a3 for F$IRQ
	move.l	a3,BaseAddr(a2)	save it here too
	cmpi.b	#$ff,UARTIrId(a3) if device is installed, IrId <> FF
	beq	nodevice

* add device to system polling table

	move.b	M$Vector(a1),d0	get descriptor's vector
	move.b	M$Prior(a1),d1	get priority
	lea.l	UARTIRQ(pc),a0	address of interrupt service routine
	OS9	F$IRQ		Add to IRQ polling table
	bcs.s	InitExit	..exit if error

	pag

* initialize port configuration

	move.l	BaseAddr(a2),a3	get address of UART
	move.b	#TxDefault,TXmode(a2)	set TxCTS h/w control
	move.b	#0,UARTIrEn(a3)	shut off all interrupts for now
	move.b	#UADTR!UAOUT2,UARTMCtrl(a3) setup Modem control register
	move.b	PD_BAU-PD_OPT+M$DTyp(a1),d0	get baud rate
	bsr.s	BaudCalc	set baud rate
	bcs.s	InitExit	..exit if error
	move.b	PD_PAR-PD_OPT+M$DTyp(a1),d0	get stop bits, bit/char & parity
	bsr	BitPar		set stop bits, parity, & bits per char
	bcs.s	InitExit	..exit if error

* enable receiver

	move.w	sr,d6	save irq status
	move.w	IRQMask(a2),sr	mask interrupts
	move.b	Otpt_On(a2),d3	get enable flag
	and.b	Otpt_Off(a2),d3	turn xmit off
	move.b	d3,UARTIrEn(a3)	put into register
	move.w	d6,sr	 
	moveq.l	#0,d1	no errors
InitExit:	rts

nodevice move.w	#E$Unit,d1	The device is not installed error,
	ori.b	#Carry,ccr	set the carry, then
	rts			return

	pag

********************
* BaudCalc:  initialize baud rate of device
*
* Passed:  d0.b = OS-9 baud rate code
*          (a2) = static storage ptr
*          (a3) = device port address
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
BaudCalc:	move.l	a0,-(sp)	save reg
	andi.w	#$00ff,d0	mask out all except baud rate
	cmpi.w	#MaxBaud,d0	legal baud rate ?
	bge.s	BadMode		..no; return error
	move.b	d0,BaudRate(a2)	save current rate
	asl	#1,d0		table has word entries
	lea.l	BaudTable(pcr),a0	get table address
	move.w	(a0,d0.w),d1	get baud rate value for chip
	ori.b	#UADLAB,UARTLCtrl(a3) set DLAB bit to access Divisor Latch
	move.b	d1,UARTLDiv(a3)	set low byte of baud rate in device
	asr	#8,d1		move high byte into position
	move.b	d1,UARTHDiv(a3)	set high byte of baud rate in device
	andi.b	#^UADLAB,UARTLCtrl(a3) reset DLAB bit to access Divisor Latch
	movea.l	(sp)+,a0	restore register
	rts			return	(carry clear)

* here if illegal or unsupported baud-rate

BadMode	movea.l	(sp)+,a0	restore a0

BadMode10
	move.w	#E$BMode,d1	get error code
	ori.b	#Carry,ccr	set the carry
	rts	return

* Baud rate table for 1.8432 MHz Crystal on 8250:

BaudTable
	dc.w	2304	0 - 50 baud  
	dc.w	1536	1 - 75 baud
	dc.w	1047	2 - 110 baud
	dc.w	857	3 - 134.5 baud
	dc.w	768	4 - 150 baud
	dc.w	384	5 - 300 baud
	dc.w	192	6 - 600 baud
	dc.w	96	7 - 1200 baud
	dc.w	64	8 - 1800 baud
	dc.w	58	9 - 2000 baud
	dc.w	48	A - 2400 baud
	dc.w	32	B - 3600 baud  
	dc.w	24	C - 4800 baud
	dc.w	16	D - 7200 baud  
	dc.w	12	E - 9600 baud
	dc.w	6	F - 19.2k baud

MaxBaud	equ	(*-BaudTable)/2
			
	pag
******************************
* BitPar:  set bits/character, # stop bits, parity mode
*
* Passed:  d0.b = device configuration
*                 bits 1,0:  0 = no parity
*                            1 = odd parity
*                            3 = even parity
*                 bits 3,2:  0 = 8 bit data
*                            1 = 7 bit data
*                            2 = 6 bit data
*                            3 = 5 bit data
*                 bits 5,4:  0 = 1 stop bit
*                            1 = 1.5 stop bits
*                            2 = 2 stop bits
*          (a2) = static storage pointer
*          (a3) = device port address
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
BitPar:	move.l	a0,-(sp)	save register
	moveq.l	#0,d2		sweep d2
	andi.w	#$00ff,d0	clear high end of word
	move.w	d0,d1		copy parity value
	andi.w	#3,d1		isolate parity code
	lea.l	TabPar(pc),a0	point at parity mode table
	move.b	(a0,d1.w),d2	get parity code
	bmi.s	BadMode		..exit if illegal value
	move.w	d0,d1		get data bit size
	lsr.w	#2,d1		make index value
	andi.w	#3,d1		make legal index
	lea.l	TabBC(pc),a0	point at bits/char table
	or.b	(a0,d1.w),d2	add in bits/char
	bmi.s	BadMode		..exit if illegal value 
	move.w	d0,d1		get stop bit value
	lsr.w	#4,d1		make index value
	andi.w	#3,d1		make legal index
	lea.l	TabSB(pc),a0	point at stop bit table
	or.b	(a0,d1.w),d2	get stop bit value
	bmi.s	BadMode		..exit if illegal value 
	move.w	sr,d6	save irq masks (NOTE: carry is clear)
	move.w	IRQMask(a2),sr	mask interrupts
	move.b	d2,UARTLCtrl(a3) set parity/bit per char
	move.b	d0,Parity(a2)	save current mode
	tst.b	RTSstate(a2)	need to assert RTS ?
	beq.s	BitPar20	..no; bra on
	bsr	EnabRTS		go assert RTS line manually
BitPar20
	move.w	d6,sr	restore irq masks
	movea.l	(sp)+,a0	restore a0
	rts			return	(carry clear)
	
TabPar
	dc.b	0		no parity
	dc.b	UAPAR		odd parity
	dc.b	$ff		illegal value
	dc.b	UAPAR!UAEPS	even parity
	
TabBC
	dc.b	UAWLS8		8 bits per char
	dc.b	UAWLS7		7 bits per char
	dc.b	UAWLS6		6 bits per char
	dc.b	UAWLS5		5 bits per char
	
TabSB
	dc.b	0	1 stop bit
	dc.b	$ff	1.5 stop bits (Not supported)
	dc.b	UASTB	2 stop bits
	dc.b	$ff	illegal value
	
	pag
********************
* Read:  Return one byte of input from the UART
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = current process descriptor
*          (a6) = system global ptr
*
* Returns:  (d0.b) = input char
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
* Destroys: a0
*
Read00	move.w	V_BUSY(a2),V_WAKE(a2)	arrange wake up signal
	move.w	(sp)+,sr	restore IRQs
	bsr	UARTSlep
Read	tst.b	InHalt(a2)	is input halted?
	ble.s	Read_a		branch if not
	cmpi.w	#MinBuff,InCount(a2)	buffer mostly emptied?
	bhi.s	Read_a		..No; continue
	movea.l	V_PORT(a2),a3	get port address
	move.w	sr,d6	save current IRQ status
	move.w	IRQMask(a2),sr	mask IRQs
	move.b	UARTLStat(a3),d1 get status of chip
	andi.b	#UATHRE,d1	transmit buffer empty?
	beq.s	Read10		no, signal XON ready to send
	clr.b	InHalt(a2)	clean up XOFF flag
	move.b	V_XON(a2),d1	get X-ON char
	move.b	d1,UARTData(a3)	transmit XON character
	bra.s	Read20		continue

Read10	move.b	V_XON(a2),d1	get X-ON char
	ori.b	#Sign,d1	set Sign bit
	move.b	d1,InHalt(a2)	flag input resume
	move.b	Otpt_On(a2),d1
	or.b	d1,UARTIrEn(a3) enable Tx IRQs
Read20	move.w	d6,sr	unmask IRQs

Read_a	tst.w	SigPrc(a2)	a process waiting for device?
	bne.s	ErrNtRdy	..Yes; return dormant terminal error
	move.w	sr,d6	save current IRQ status
	move.w	IRQMask(a2),sr	mask IRQs
	tst.w	InCount(a2)	any data?
	beq.s	Read00		branch if not
	move.w	d6,sr	unmask IRQs
	movea.l	InEmpty(a2),a0	point to next char
	move.b	(a0)+,d0	get character
	subq.w	#1,InCount(a2)	dec buffer size by one
	cmpa.l	InEnd(a2),a0	at end of buffer?
	blo.s	Read_b		branch if not
	lea.l	InpBuf(a2),a0	point to start of buffer
Read_b	move.l	a0,InEmpty(a2)	update buffer pointer
	tst.b	V_ERR(a2)	see if error occured
	beq.s	Read90		return if no error
	clr.b	PD_ERR(a1)	clear path desc error value
	btst	#UAPE_B,V_ERR(a2)	see if parity error
	beq.s	ReadE1		jif not error
	ori.b	#PD_EParity,PD_ERR(a1)	set error bits in path descriptor
ReadE1	btst	#UAOR_B,V_ERR(a2)	see if overrun error
	beq.s	ReadE2		jif not error
	ori.b	#PD_EOverrun,PD_ERR(a1)	set error bits in path descriptor
ReadE2	btst	#UAFE_B,V_ERR(a2)	see if framing error
	beq.s	ReadE3		jif not error
	ori.b	#PD_EFraming,PD_ERR(a1)	set error bits in path descriptor
ReadE3	clr.b	V_ERR(a2)
	move.w	#E$Read,d1	signal read error
	ori.b	#Carry,ccr	return Carry set
Read90	rts

ErrNtRdy
	move.w	#E$NotRdy,d1
	ori.b	#Carry,ccr	return Carry set
	rts

	pag
********************
* UARTSlep:  Sleep until interrupt occurs
*
* Passed:  (a2) = driver global storage
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code (signal)
*
* Destroys:  possibly PC
*
UARTSlep
	move.l	d0,-(sp)	save reg
	moveq.l	#0,d0		sleep indefinately
	OS9svc	F$Sleep		wait for interrupt (*only works with Sleep 0*)
	move.w	P$Signal(a4),d1	signal present?
	beq.s	ACSL90		..no; return
	cmpi.w	#S$Deadly,d1	Deadly signal?
	blo.s	ACSLER		..yes; return error
ACSL90	btst.b	#Condemn,P$State(a4)	has process died?
	bne.s	ACSLER		..Yes; return error
	move.l	(sp)+,d0	restore register, clear carry
	rts

ACSLER	addq.l	#8,sp		Exit to caller's caller
	ori.b	#Carry,ccr	return Carry set
	rts

	pag
********************
* Write
*   Output one character to UART
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*          d0.b = char to write
*
* Returns:  nothing
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
Write00	move.w	V_BUSY(a2),V_WAKE(a2)	arrange wake up signal
	move.w	d6,sr	restore IRQs
	bsr.s	UARTSlep	sleep a bit
Write	move.w	sr,d6	save current IRQ status
	move.w	IRQMask(a2),sr	mask IRQs
	move.w	OutCount(a2),d2	get output buffer data count
	cmpi.w	#OutSiz,d2	room for more data?
	bhs.s	Write00		..no; wait for room
	addq.w	#1,OutCount(a2)	increment byte count
	movea.l	OutFill(a2),a0	point to next char location
	move.b	d0,(a0)+	store char and inc pointer
	cmpa.l	OutEnd(a2),a0	end of buffer?
	blo.s	Write10		branch if not
	lea.l	OutBuf(a2),a0	point to start of buffer
Write10	move.l	a0,OutFill(a2)	update buffer pointer
	bclr.b	#H_Empty,OutHalt(a2)	clear output buffer empty flag
	beq.s	Write80		..if data was in buffer, no need to re-enable irqs
	btst.b	#H_XOFF,OutHalt(a2)	output currently halted ?
	bne.s	Write80		..yes; don't enable irqs
	movea.l	BaseAddr(a2),a0	get device address
	move.b	Otpt_On(a2),d1
	or.b	d1,UARTIrEn(a0) enable Tx interrupts
Write80	move.w	d6,sr	unmask IRQs
	moveq.l	#0,d1		clear carry
	rts

	pag
********************
* GetStat:  get device status
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = process descriptor
*          (a5) = caller's register stack ptr
*          (a6) = system global data ptr
*          d0.w = status call function code
*
* Returns:  varies with function code
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
GetStat
*
* return data available count
*
	cmpi.w	#SS_Ready,d0	Ready status?
	bne.s	GetSta10	..no
	clr.w	R$d1(a5)	sweep high word of register
	move.w	InCount(a2),R$d1+2(a5)	return input char count to caller
	beq	ErrNtRdy	..No data; return not ready error
	rts	(Carry	clear)

* return eof status
*
GetSta10	cmpi.w	#SS_EOF,d0	End of file?
	beq.s	GetSta99	..yes; return (Carry clear)

* check for "get options"
*
	cmpi.w	#SS_Opt,d0	get options call ?
	bne.s	Unknown		..no; return error for unknown request

* update path descriptor for currently active baud, parity
*
	move.b	BaudRate(a2),PD_BAU(a1)	set currently active baud rate
	move.b	Parity(a2),PD_PAR(a1)	set currently active comms mode
	rts	(carry	clear)

* return error for unknown service requests
*
Unknown	move.w	#E$UnkSvc,d1	Unknown service code
	ori.b	#Carry,ccr	return Carry set
GetSta99	rts

	pag
********************
* PutStat:  set device status
*
* Passed:  (a1) = Path Descriptor
*          (a2) = Static Storage address
*          (a4) = process descriptor
*          (a5) = caller's register stack ptr
*          (a6) = system global data ptr
*          d0.w = status call function code
*
* Returns:  varies with function code
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
PutStat
*
* signal process on data available
*
	cmpi.w	#SS_SSig,d0	signal process when ready?
	bne.s	PutSta_A	..No
	tst.w	SigPrc(a2)	somebody already waiting?
	bne	ErrNtRdy	..Yes; error
	move.w	PD_CPR(a1),d0	get caller's process ID
	move.w	R$d2+2(a5),d1	get signal code
	move.w	sr,d6	save IRQ status
	move.w	IRQMask(a2),sr	disable IRQs
	tst.w	InCount(a2)	any Data available?
	bne.s	PutSta10	yes, signal Data ready
	move.w	PD_PD(a1),d2	get associated path #
	movem.w	d0-d2,SigPrc(a2)	save process id, signal, path #
	movea.l	BaseAddr(a2),a0	point to base address
	move.b	Otpt_On(a2),d1
	or.b	d1,UARTIrEn(a0) enable Tx interrupts
	move.w	d6,sr	unmask IRQs
	moveq.l	#0,d1	clear carry
	rts

PutSta10	move.w	d6,sr	restore IRQ status
	bra	SendSig	send the signal

* release all signal conditions
*
PutSta_A	cmpi.w	#SS_Relea,d0	Release Device?
	bne.s	PutSta_B	bra if not
	move.w	PD_CPR(a1),d0	get process id
	move.w	PD_PD(a1),d2	get associated path #
	lea.l	SigPrc(a2),a3	check SigPrc
	ifdef	DCDSIG
	bsr.s	ClearSig
	lea.l	DCDPrcOn(a2),a3	now check DCDPrcOn
	bsr.s	ClearSig
	lea.l	DCDPrcOff(a2),a3 now check DCDPrcOff
	endc	DCDSIG

ClearSig	cmp.w	(a3),d0	is signal for this process ?
	bne.s	ClearSig20	..no; exit
	cmp.w	4(a3),d2	does it concern this path ?
	bne.s	ClearSig20	..no; exit
	clr.w	(a3)		clear down signal condition
ClearSig20	moveq.l	#0,d1	flag no error
	rts	return

	ifdef	DCDSIG

* signal on DCD transitions
*
PutSta_B
	cmpi.w	#SS_DCOn,d0	signal on carrier detect?
	bne.s	PutSta_C	no, check next
	move.w	PD_CPR(a1),d0	get process id
	move.w	R$d2+2(a5),d1	get signal code
	move.w	PD_PD(a1),d2	get associated path #
	movem.w	d0-d2,DCDPrcOn(a2)	save them
	rts	(carry	clear)
PutSta_C
	cmpi.w	#SS_DCOff,d0	on loss of carrier?
	bne.s	PutSta_D	branch if not
	move.w	PD_CPR(a1),d0	get process id
	move.w	R$d2+2(a5),d1	get signal code
	move.w	PD_PD(a1),d2	get associated path #
	movem.w	d0-d2,DCDPrcOff(a2)	save them
	rts	(carry	clear)
	else
PutSta_B	equ	*
	endc	DCDSIG

	pag
* RTS control
*
PutSta_D
	cmpi.w	#SS_EnRTS,d0	enable RTS
	bne.s	PutSta_E	branch if not.
EnabRTS	st.b	RTSstate(a2)	flag RTS asserted
	movea.l	BaseAddr(a2),a0	get device base address
	ori.b	#UARTS,UARTMCtrl(a0) set RTS
	rts			return (carry clear)

PutSta_E
	cmpi.w	#SS_DsRTS,d0	disable RTS
	bne.s	PutSta_F	branch if not
DisablRTS
	sf.b	RTSstate(a2)	flag RTS negated
	movea.l	BaseAddr(a2),a0	get device base address
	andi.b	#^UARTS,UARTMCtrl(a0) reset RTS
	rts			return (carry clear)


* change path options
*
PutSta_F
	cmpi.w	#SS_Opt,d0	set options call ?
	bne.s	PutSta_G	branch if not

* here to check whether baud/parity have changed

CheckMode
	move.b	PD_BAU(a1),d0	get baud rate current
	cmp.b	BaudRate(a2),d0	has it changed ?
	bne.s	ChngMode	..yes; attempt to re-configure
	move.b	PD_PAR(a1),d1	get port configuration
	cmp.b	Parity(a2),d1	has communication mode changed ?
	beq.s	PutSta90	..no; exit (nothing to do)
ChngMode
	movea.l	V_PORT(a2),a3	get device port address
	bsr	BaudCalc	attempt new baud rate
	bcs.s	ChngExit	..exit if error
	move.b	PD_PAR(a1),d0	get parity, etc
	bsr	BitPar		attempt to change communication mode
ChngExit
	move.w	sr,d6	save ccr status
	rtr	restore	ccr and return

* new path open
*
PutSta_G
	cmpi.w	#SS_Open,d0	new path opened ?
	beq.s	CheckMode	..yes; then check for configuration changes

* send BREAK out port
*
PutSta_H
	cmpi.w	#SS_Break,d0	send break ?
	bne	Unknown	..no; return error
	movea.l	V_PORT(a2),a3	get device port address
	ori.b	#UASBRK,UARTLCtrl(a3)	start the break
	move.l	#BrkTime,d0	get "break time"
Brk_Timed
	os9	F$Sleep		delay while break being sent
	bcs.s	Brk_manual	do manual timing if no clock
	tst.l	d0		sleep the full time ?
	beq.s	Brk_End		..yes; go stop the break
	bra.s	Brk_Timed	..else, wait for break-time to expire

Brk_manual
	move.w	#5,d0		outer counter
	moveq.l	#-1,d1		iniz inner counter
Brk_a	dbra	d1,Brk_a
	dbra	d0,Brk_a
Brk_End	andi.b	#^UASBRK,UARTLCtrl(a3)	stop the break
	rts	(carry	clear)

PutSta90	moveq.l	#0,d1	clear Carry
	rts
	pag
********************
* TrmNat:  Terminate UART processing
*
* Passed:  (a1) = device descriptor pointer
*          (a2) = static storage
*          (a4) = current process descriptor ptr
*          (a6) = system global data ptr
*
* Returns:  none
*
* Error Return:  (cc) = carry set
*                d1.w = error code
*
TRMN00	move.w	V_BUSY(a2),V_WAKE(a2)	arrange wake up signal
	move.w	d6,sr	restore IRQs
	pea.l	TrmNat(pc)	return to entry point if signals
	bsr	UARTSlep	wait for interrupt
	addq.l	#4,sp		toss return address if no signals
TrmNat	move.w	P$ID(a4),d0
	move.w	d0,V_BUSY(a2)
	move.w	d0,V_LPRC(a2)
	move.w	sr,d6	save current IRQ status
	move.w	IRQMask(a2),sr	mask IRQs
	tst.w	OutCount(a2)	any data?
	bne.s	TRMN00		sleep if there is

	movea.l	BaseAddr(a2),a0	get port base address
	move.b	#UAOUT2,UARTMCtrl(a0) Turn off DTR and RTS, but leave OUT2 on

	move.b	Otpt_On(a2),d1	get enable bits
	not.b	d1		complement it
	and.b	d1,UARTIrEn(a0)	disable interrupts
TrmNat40
	move.w	d6,sr	restore IRQ masks
	move.b	M$Vector(a1),d0	get vector #
	suba.l	a0,a0

	OS9	F$IRQ	remove UART from polling tbl

	rts

	pag
********************
* UARTIRQ:  Process interrupt (input or output) from UART
*
* Passed:  (a2) = Static Storage addr
*          (a3) = port address ptr
*          (a6) = system global data ptr
*
* Returns:  (cc) = carry set if false interrupt, else clear
*
* Destroys:  May only destroy D0, D1, A0, A2, A3 and A6.  Any
*            other registers used MUST be preserved.
*

* Exit here if no interrupts

UARIRQEx	ori.b	#Carry,ccr	return with carry set
	rts

UARTIRQ	move.b	UARTIrId(a3),d1	get IRQ status register
	andi.b	#UAIrId!UAIrPend,d1	mask off interrupts
	cmp.b	#UAIrPend,d1	If pend bit set, no interrupt
	beq.s	UARIRQEx	if no interrupts, branch.
	cmp.b	#UAIrRcvAv,d1	is this a recv interrutpt?
	bne.s	OutIRQ		if not, branch

	move.b	InHalt(a2),d1	XON or XOFF waiting to be sent?
	bpl	InIRQ		handle input IRQ if not
	move.b	UARTLStat(a3),d1 transmit buffer empty?
	andi.b	#UATHRE,d1	
	beq	InIRQ		handle input IRQ if not
	move.b	InHalt(a2),d1	get X-ON to be sent again
	bclr.l	#Signbit,d1	clear Sign bit
	move.b	d1,UARTData(a3)	send character
	move.b	V_XON(a2),d0	get X-ON value
	eor.b	d0,d1		get Zero if X-ON
	move.b	d1,InHalt(a2)	mark it sent
	bra	InIRQ		handle input IRQ

	pag
********************
* OutIRQ:  UART output interrupt service
*
* Passed:  
*          (a2) = static storage address
*          (a3) = device port address
*          (a6) = system global data ptr
*          d1.b = device interrupt ID register contents
*
OutIRQ	cmp.b	#UAIrTraEm,d1	is this a transmitter empty interrutpt?
	bne	MStatIRQ	if not, branch
	move.b	InHalt(a2),d0	send X-ON or X-OFF?
	bpl.s	OutI_a		branch if not
	bclr.l	#Signbit,d0	clear Sign bit
	move.b	d0,UARTData(a3)	send character
	move.b	V_XON(a2),d1	get X-ON value
	eor.b	d1,d0		get Zero if X-ON
	move.b	d0,InHalt(a2)	mark it sent
	tst.b	OutHalt(a2)	is output halted?
	bne.s	OutIRQ3		branch if so
	rts

OutI_a	btst.b	#H_XOFF,OutHalt(a2)	is output suspension requested ?
	bne.s	OutIRQ3		..yes; go disable interrupts
	move.w	OutCount(a2),d1	any Data in buffer?
	beq.s	OutIRQ2		branch if not
	subq.w	#1,d1		taking one char
	move.l	a1,-(sp)	save a1
	movea.l	OutEmpty(a2),a1	get pointer to next char
	move.b	(a1)+,UARTData(a3)	put Data in acia
	cmpa.l	OutEnd(a2),a1	end of buffer?
	blo.s	OutI_1		branch if not
	lea.l	OutBuf(a2),a1	point to start
OutI_1	move.l	a1,OutEmpty(a2)	update pointer
	movea.l	(sp)+,a1	
	move.w	d1,OutCount(a2)	update char count
	cmpi.w	#MinBuff,d1	ready for more data?
	bhi.s	Wake90		exit if not
	tst.w	d1		output buffer empty?
	bne.s	WakeUp		just wake up if not
OutIRQ2	bset.b	#H_Empty,OutHalt(a2)	flag halted; buffer empty

OutIRQ3	move.b	UARTIrEn(a3),d1	disable transmit interrupts
	and.b	Otpt_Off(a2),d1	
	move.b	d1,UARTIrEn(a3)	write to register

WakeUp	move.w	V_WAKE(a2),d0	Owner waiting?
	beq.s	Wake90		..no; return
	clr.w	V_WAKE(a2)
	moveq.l	#S$Wake,d1	Wake up signal

SendSig	OS9svc	F$Send	wake up process

Wake90	moveq.l	#0,d1	clear carry
	rts

	pag
********************
* InIRQ:  UART input interrupt service
*
* Passed:  
*          (a2) = static storage address
*          (a3) = device port address
*          (a6) = system global data ptr
*

* Notice the Absence of Error Checking Here

InIRQ	move.b	UARTLStat(a3),d1	get error status
	andi.b	#UAOR!UAPE!UAFE,d1	any errors?
	or.b	d1,V_ERR(a2)	update cumulative errors
	move.b	UARTData(a3),d0	Read input char
	beq	InIRQ1		..NULL, impossible ctl chr
	cmp.b	V_INTR(a2),d0	keyboard Interrupt?
	beq	InAbort		..Yes
	cmp.b	V_QUIT(a2),d0	keyboard Quit?
	beq	InQuit		..Yes
	cmp.b	V_PCHR(a2),d0	keyboard Pause?
	beq	InPause		..Yes
	cmp.b	V_XON(a2),d0	X-ON continue?
	beq	InXON		..Yes
	cmp.b	V_XOFF(a2),d0	X-OFF Immediate Pause request?
	beq	InXOFF		..Yes

InIRQ1	move.l	a1,-(sp)	save a1
	movea.l	InFill(a2),a1	point to current char
	move.b	d0,(a1)+	put Data in buffer
	addq.w	#1,InCount(a2)	count character
	cmpi.w	#InpSiz,InCount(a2)	buffer full?
	bls.s	InIRQ10	branch if not
	subq.w	#1,InCount(a2)	uncount character
	ori.b	#UAOR,V_ERR(a2)	simulate ip over-run error
	move.l	(sp)+,a1	restore a1
	bra	WakeUp	exit

InIRQ10	cmp.l	InEnd(a2),a1	end of buffer?
	blo.s	InIRQ30	branch if not
	lea.l	InpBuf(a2),a1	point to start of buffer
InIRQ30	move.l	a1,InFill(a2)	update next in pointer
	move.l	(sp)+,a1	restore a1
	move.w	SigPrc(a2),d0	any process to notify?
	beq.s	InIRQ4	..no
	move.w	SigPrc+2(a2),d1	get signal code
	clr.w	SigPrc(a2)	disable signal sending
	bra	SendSig	signal waiting process & return

InIRQ4	move.b	V_XOFF(a2),d0	get X-OFF char
	beq.s	InIRQ9	branch if not enabled
	cmpi.w	#MaxBuff,InCount(a2)	is buffer almost full?
	blo.s	InIRQ9	bra if not
	move.b	InHalt(a2),d1	have we sent XOFF?
	bne.s	InIRQ9	yes then don't send it again
	bclr.l	#Signbit,d0	insure Sign clear
	move.b	d0,V_XOFF(a2)
	ori.b	#Sign,d0	set Sign bit
	move.b	d0,InHalt(a2)	flag input halt
	move.b	Otpt_On(a2),UARTIrEn(a3) enable transmit interrupts
	
InIRQ9	move.b	UARTLStat(a3),d1	any more input available?
	andi.b	#UADR,d1		see if receive ready
	beq	WakeUp	exit if not
	bra	InIRQ	go get it if so

	pag
********************
* Control character routines
*
* Passed:  (a0) = device base address
*          (a2) = static storage ptr
*          (a3) = device port address
*          (a6) = system global data ptr
*          d0.b = received input character
*
InPause	tst.l	V_DEV2(a2)	any echo device?
	beq	InIRQ1	buffer char and exit if not
	move.l	a1,-(sp)	save it
	movea.l	V_DEV2(a2),a1	get echo device static ptr
	move.b	d0,V_PAUS(a1)	request pause
	move.l	(sp)+,a1	restore it
	bra	InIRQ1	buffer char and exit

InAbort	moveq.l	#S$Intrpt,d1	keyboard INTERRUPT signal
	bra.s	InQuit10

InQuit	moveq.l	#S$Abort,d1	Abort signal

InQuit10	move.l	d0,-(sp)	save input char
	move.w	V_LPRC(a2),d0	last process ID
	beq.s	InQuit90	..none; exit
	clr.w	V_WAKE(a2)
	OS9svc	F$Send 		send signal to last user 
InQuit90 move.l	(sp)+,d0	restore input char
	bra	InIRQ1	buffer char, exit
InXON	bclr.b	#H_XOFF,OutHalt(a2)	enable output
	tst.b	OutHalt(a2)	still halted (buffer empty)?
	bne.s	InXExit	exit if so
	move.b	Otpt_On(a2),d1
	or.b	d1,UARTIrEn(a3) Enable transmit intterupts
	move.b	UARTLStat(a3),d1	output buffer empty?
	andi.b	#UATHRE,d1
	beq.s	InXExit	exit if not
	bra	OutIRQ	start output if so

InXOFF	bset.b	#H_XOFF,OutHalt(a2)	flag output restricted
	move.b	Otpt_Off(a2),d1
	and.b	d1,UARTIrEn(a3) 	transmit disable 

InXExit	moveq.l	#0,d1	clear carry
	rts

********************************
* MStatIRQ:	Modem Status Change Interrupt service
*
* Passed:  
*          (a2) = static storage address
*          (a3) = device port address
*          (a6) = system global data ptr
*          d1.b = device interrupt ID register contents
*
MStatIRQ
	cmp.b	#UAIrMStat,d1	is this a Modem Status interrutpt?
	bne.s	LStatIRQ	if not, branch
	move.b	UARTMStat(a3),d0 Get current modem status register
	move.b	d0,d1		make copy for masking
	andi.b	#UADRLSD,d1	see if DCD changed
	beq.s	MStat20		if not, then skip
	lea.l	DCDPrcOn(a2),a3 assume off->on transition
	move.b	d0,d1		get copy of register again
	andi.b	#UARLSD,d1	if it changed, to which? off->on / on->off
	bne	MStat10		if off->on, then skip
	lea.l	DCDPrcOff(a2),a3 change to on->off
MStat10	move.w	(a3)+,d0	get process ID
	beq.s	MStat20		if zero, then exit
	move.w	(a3),d1		get signal
	OS9	F$Send		signal task that DCD changed

MStat20	rts

********************************
* LStatIRQ:	Line Status Change Interrupt service
*
* Passed:  
*          (a2) = static storage address
*          (a3) = device port address
*          (a6) = system global data ptr
*          d1.b = device interrupt ID register contents
*
LStatIRQ
	cmp.b	#UAIrLStat,d1	is this a Line Status interrutpt?
	bne	UARIRQEx	if not, exit
	move.b	UARTLStat(a3),d0 Get line status register
	move.b	d0,d1		save a copy for later
	andi.b	#UAOR!UAPE!UAFE,d0 get just the error status bits
	or.b	d0,V_ERR(a2)	indicate any error conditions

	andi.b	#UABI,d1	see if Break was received
	beq.s	LStat10		if bit was zero, no break
	moveq.l	#S$Intrpt,d1	Send Interrupt signal upon BREAK
	move.w	V_LPRC(a2),d0	last process ID
	beq.s	LStat10		..none; exit
	clr.w	V_WAKE(a2)
	OS9svc	F$Send 		send signal to last user 

LStat10	rts

	ends
